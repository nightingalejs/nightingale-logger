{"version":3,"sources":["../src/index.js"],"names":["global","__NIGHTINGALE_GET_CONFIG_FOR_LOGGER","handlers","processors","getConfigForLogger","key","Logger","displayName","childSuffixKey","childDisplayName","context","logger","setContext","_context","extendedContext","Object","assign","record","getConfig","filter","handler","isHandling","level","length","ERROR","console","log","message","forEach","process","some","handle","metadata","INFO","options","undefined","datetime","Date","extra","addRecord","metadataStyles","TRACE","DEBUG","WARN","Error","error","name","ALERT","FATAL","value","inspect","depth","styles","varName","varValue","infoSuccess","symbol","infoFail","now","time","diffTime","readableTime","seconds","Math","floor","ms","timeMs","timeEnd","fn","functionName","callback","enter","exit"],"mappings":";;;;;;;;;;;;;;AAAA;;;;AACA;;;;;;;;AAEA,IAAI,CAACA,OAAOC,mCAAZ,EAAiD;AAC/CD,SAAOC,mCAAP,GAA6C,YAAY;AACvD,WAAO,EAAEC,UAAU,EAAZ,EAAgBC,YAAY,EAA5B,EAAP;AACD,GAFD;AAGD;;AAED,SAASC,kBAAT,CAA4BC,GAA5B,EAAiC;AAC/B,SAAOL,OAAOC,mCAAP,CAA2CI,GAA3C,CAAP;AACD;;AAED;;;;;IAIqBC,M;;AAInB;;;;;;AAMA,kBAAYD,GAAZ,EAAyBE,WAAzB,EAA+C;AAAA,YAAnCF,GAAmC;;AAAA,YAAtBE,WAAsB;;AAAA;;AAC7C,SAAKF,GAAL,GAAWA,GAAX;AACA,SAAKE,WAAL,GAAmBA,WAAnB;AACD;;;;gCAEW;AACV,aAAOH,mBAAmB,KAAKC,GAAxB,CAAP;AACD;;AAED;;;;;;;;;;0BAOMG,c,EAAwBC,gB,EAA2B;AAAA,cAAnDD,cAAmD;;AAAA,cAA3BC,gBAA2B;;AACvD,aAAO,IAAIH,MAAJ,CAAc,KAAKD,GAAnB,SAA0BG,cAA1B,EAA4CC,gBAA5C,CAAP;AACD;;AAED;;;;;;;;;;;;;;;;;;4BAeQC,Q,EAAiB;AAAA,cAAjBA,QAAiB;;AACvB,UAAMC,SAAS,IAAIL,MAAJ,CAAW,KAAKD,GAAhB,CAAf;AACAM,aAAOC,UAAP,CAAkBF,QAAlB;AACA,aAAOC,MAAP;AACD;;AAED;;;;;;;;+BAKWD,O,EAAiB;AAAA,cAAjBA,OAAiB;;AAC1B,WAAKG,QAAL,GAAgBH,OAAhB;AACD;;AAED;;;;;;;;mCAKeI,e,EAAyB;AAAA,cAAzBA,eAAyB;;AACtCC,aAAOC,MAAP,CAAc,KAAKH,QAAnB,EAA6BC,eAA7B;AACD;;AAED;;;;;;;;;;8BAOUG,M,EAAgB;AAAA;;AAAA,cAAhBA,MAAgB;;AAAA,uBACO,KAAKC,SAAL,EADP;;AAAA,UAClBhB,QADkB,cAClBA,QADkB;AAAA,UACRC,UADQ,cACRA,UADQ;;AAExBD,iBAAWA,SAASiB,MAAT,CAAgB;AAAA,eAAWC,QAAQC,UAAR,CAAmBJ,OAAOK,KAA1B,EAAiC,MAAKjB,GAAtC,CAAX;AAAA,OAAhB,CAAX;AACA,UAAIH,SAASqB,MAAT,KAAoB,CAAxB,EAA2B;AACzB,YAAIN,OAAOK,KAAP,GAAe,4BAAOE,KAA1B,EAAiC;AAC/B;AACAC,kBAAQC,GAAR,CAAY,4CAAZ,EAA0D;AACxDrB,iBAAKY,OAAOZ,GAD4C;AAExDsB,qBAASV,OAAOU;AAFwC,WAA1D;AAID;AACD;AACD;;AAED,UAAIxB,UAAJ,EAAgB;AACdA,mBAAWyB,OAAX,CAAmB;AAAA,iBAAWC,QAAQZ,MAAR,EAAgBA,OAAOP,OAAvB,CAAX;AAAA,SAAnB;AACD;;AAEDR,eAAS4B,IAAT,CAAc;AAAA,eAAWV,QAAQW,MAAR,CAAed,MAAf,MAA2B,KAAtC;AAAA,OAAd;AACD;;AAED;;;;;;;;;;;;wBAUEU,O,EACAK,Q,EAGA;AAAA,UAFAV,KAEA,yDAFgB,4BAAOW,IAEvB;AAAA,UADAC,OACA,yDADmBC,SACnB;;AAAA,cAJAR,OAIA;;AAAA,cAHAK,QAGA;;AAAA,cAFAV,KAEA;;AAAA,cADAY,OACA;;AACA,UAAIxB,UAAUsB,YAAYA,SAAStB,OAAnC;AACA,UAAIsB,QAAJ,EAAc;AACZ,eAAOA,SAAStB,OAAhB;AACD;;AAED,UAAIO,SAAS;AACXK,eAAOA,KADI;AAEXjB,aAAK,KAAKA,GAFC;AAGXE,qBAAa,KAAKA,WAHP;AAIX6B,kBAAU,IAAIC,IAAJ,EAJC;AAKXV,iBAASA,OALE;AAMXjB,iBAASA,WAAW,KAAKG,QANd;AAOXmB,kBAAUA,QAPC;AAQXM,eAAO;AARI,OAAb;;AAWA,UAAIJ,OAAJ,EAAa;AACXjB,iBAASF,OAAOC,MAAP,CAAckB,OAAd,EAAuBjB,MAAvB,CAAT;AACD;;AAED,WAAKsB,SAAL,CAAetB,MAAf;AACA,aAAO,IAAP;AACD;;AAGD;;;;;;;;;;;0BAQMU,O,EAASK,Q,EAAUQ,c,EAAgB;AACvC,aAAO,KAAKd,GAAL,CAASC,OAAT,EAAkBK,QAAlB,EAA4B,4BAAOS,KAAnC,EAA0C,EAAED,8BAAF,EAA1C,CAAP;AACD;;AAGD;;;;;;;;;;;0BAQMb,O,EAASK,Q,EAAUQ,c,EAAgB;AACvC,aAAO,KAAKd,GAAL,CAASC,OAAT,EAAkBK,QAAlB,EAA4B,4BAAOU,KAAnC,EAA0C,EAAEF,8BAAF,EAA1C,CAAP;AACD;;AAED;;;;;;;;;;;yBAQKb,O,EAASK,Q,EAAUQ,c,EAAgB;AACtC,aAAO,KAAKd,GAAL,CAASC,OAAT,EAAkBK,QAAlB,EAA4B,4BAAOC,IAAnC,EAAyC,EAAEO,8BAAF,EAAzC,CAAP;AACD;;AAED;;;;;;;;;;;yBAQKb,O,EAASK,Q,EAAUQ,c,EAAgB;AACtC,aAAO,KAAKd,GAAL,CAASC,OAAT,EAAkBK,QAAlB,EAA4B,4BAAOW,IAAnC,EAAyC,EAAEH,8BAAF,EAAzC,CAAP;AACD;;AAED;;;;;;;;;;;0BAQMb,O,EAAwC;AAAA,UAA/BK,QAA+B,yDAApB,EAAoB;AAAA,UAAhBQ,cAAgB;;AAC5C,UAAIb,mBAAmBiB,KAAvB,EAA8B;AAC5BZ,iBAASa,KAAT,GAAiBlB,OAAjB;AACAA,kBAAaK,SAASa,KAAT,CAAeC,IAA5B,UAAqCd,SAASa,KAAT,CAAelB,OAApD;AACD;AACD,aAAO,KAAKD,GAAL,CAASC,OAAT,EAAkBK,QAAlB,EAA4B,4BAAOR,KAAnC,EAA0C,EAAEgB,8BAAF,EAA1C,CAAP;AACD;;AAED;;;;;;;;;;;0BAQMb,O,EAASK,Q,EAAUQ,c,EAAgB;AACvC,aAAO,KAAKd,GAAL,CAASC,OAAT,EAAkBK,QAAlB,EAA4B,4BAAOe,KAAnC,EAA0C,EAAEP,8BAAF,EAA1C,CAAP;AACD;;AAED;;;;;;;;;;;0BAQMb,O,EAASK,Q,EAAUQ,c,EAAgB;AACvC,aAAO,KAAKd,GAAL,CAASC,OAAT,EAAkBK,QAAlB,EAA4B,4BAAOgB,KAAnC,EAA0C,EAAER,8BAAF,EAA1C,CAAP;AACD;;AAED;;;;;;;;;;;iCAQaS,K,EAAOjB,Q,EAAUQ,c,EAAgB;AAC5C;AACA;AACAS,cAAQ,eAAKC,OAAL,CAAaD,KAAb,EAAoB,EAAEE,OAAO,CAAT,EAApB,CAAR;AACA,aAAO,KAAKzB,GAAL,CAASuB,KAAT,EAAgBjB,QAAhB,EAA0B,4BAAOU,KAAjC,EAAwC,EAAEF,8BAAF,EAAkBY,QAAQ,CAAC,MAAD,CAA1B,EAAxC,CAAP;AACD;;AAED;;;;;;;;;;;;+BASWC,O,EAASC,Q,EAAUtB,Q,EAAUQ,c,EAAgB;AACtDc,iBAAW,eAAKJ,OAAL,CAAaI,QAAb,EAAuB,EAAEH,OAAO,CAAT,EAAvB,CAAX;AACA,aAAO,KAAKzB,GAAL,CAAY2B,OAAZ,WAAyBC,QAAzB,EAAqCtB,QAArC,EAA+C,4BAAOU,KAAtD,EAA6D,EAAEF,8BAAF,EAAkBY,QAAQ,CAAC,MAAD,CAA1B,EAA7D,CAAP;AACD;;AAED;;;;;;;;;;;4BAQQzB,O,EAASK,Q,EAAUQ,c,EAAgB;AACzC,aAAO,KAAKe,WAAL,CAAiB5B,OAAjB,EAA0BK,QAA1B,EAAoCQ,cAApC,CAAP;AACD;;AAED;;;;;;;;;;;gCAQYb,O,EAASK,Q,EAAUQ,c,EAAgB;AAC7C,aAAO,KAAKd,GAAL,CAASC,OAAT,EAAkBK,QAAlB,EAA4B,4BAAOC,IAAnC,EAAyC;AAC9CO,sCAD8C;AAE9CgB,gBAAQ,GAFsC;AAG9CJ,gBAAQ,CAAC,OAAD,EAAU,MAAV;AAHsC,OAAzC,CAAP;AAKD;;AAED;;;;;;;;;;;iCAQazB,O,EAASK,Q,EAAUQ,c,EAAgB;AAC9C,aAAO,KAAKd,GAAL,CAASC,OAAT,EAAkBK,QAAlB,EAA4B,4BAAOU,KAAnC,EAA0C;AAC/CF,sCAD+C;AAE/CgB,gBAAQ,GAFuC;AAG/CJ,gBAAQ,CAAC,OAAD;AAHuC,OAA1C,CAAP;AAKD;;AAED;;;;;;;;;;;yBAQKzB,O,EAASK,Q,EAAUQ,c,EAAgB;AACtC,aAAO,KAAKiB,QAAL,CAAc9B,OAAd,EAAuBK,QAAvB,EAAiCQ,cAAjC,CAAP;AACD;;AAED;;;;;;;;;;;6BAQSb,O,EAASK,Q,EAAUQ,c,EAAgB;AAC1C,aAAO,KAAKd,GAAL,CAASC,OAAT,EAAkBK,QAAlB,EAA4B,4BAAOC,IAAnC,EAAyC;AAC9CO,sCAD8C;AAE9CgB,gBAAQ,GAFsC;AAG9CJ,gBAAQ,CAAC,KAAD,EAAQ,MAAR;AAHsC,OAAzC,CAAP;AAKD;;AAED;;;;;;;;;;;8BAQUzB,O,EAASK,Q,EAAUQ,c,EAAgB;AAC3C,aAAO,KAAKd,GAAL,CAASC,OAAT,EAAkBK,QAAlB,EAA4B,4BAAOU,KAAnC,EAA0C;AAC/CF,sCAD+C;AAE/CgB,gBAAQ,GAFuC;AAG/CJ,gBAAQ,CAAC,KAAD;AAHuC,OAA1C,CAAP;AAKD;;AAED;;;;;;;;;;yBAOKzB,O,EAASK,Q,EAAUQ,c,EAAsC;AAAA,UAAtBlB,KAAsB,yDAAd,4BAAOoB,KAAO;;AAC5D,UAAIf,OAAJ,EAAa;AACX,aAAKD,GAAL,CAASC,OAAT,EAAkBK,QAAlB,EAA4BV,KAA5B,EAAmC,EAAEkB,8BAAF,EAAnC;AACD;;AAED,aAAOH,KAAKqB,GAAL,EAAP;AACD;;;6BAEQ/B,O,EAAiBK,Q,EAAmBQ,c,EAAyB;AAAA,cAA7Db,OAA6D;;AAAA,cAA5CK,QAA4C;;AAAA,cAAzBQ,cAAyB;;AACpE,aAAO,KAAKmB,IAAL,CAAUhC,OAAV,EAAmBK,QAAnB,EAA6BQ,cAA7B,EAA6C,4BAAOP,IAApD,CAAP;AACD;;AAED;;;;;;;;;;;;;;;4BAYQ0B,I,EAAMhC,O,EAAuE;AAAA,UAA9DK,QAA8D,yDAAnD,EAAmD;AAAA,UAA/CQ,cAA+C;AAAA,UAA/BlB,KAA+B,yDAAvB,4BAAOoB,KAAgB;AAAA,UAATR,OAAS;;AACnF,UAAMwB,MAAMrB,KAAKqB,GAAL,EAAZ;;AAEA,UAAME,WAAWF,MAAMC,IAAvB;;AAEA,UAAIC,WAAW,IAAf,EAAqB;AACnB5B,iBAAS6B,YAAT,GAA2BD,QAA3B;AACD,OAFD,MAEO;AACL,YAAME,UAAUF,WAAW,IAAX,IAAmBG,KAAKC,KAAL,CAAWJ,WAAW,IAAtB,CAAnC;AACA,YAAMK,KAAKL,WAAYE,UAAU,IAAjC;AACA9B,iBAAS6B,YAAT,SAA2BC,UAAaA,OAAb,cAA+B,EAA1D,IAA+DG,EAA/D;AACD;;AAEDjC,eAASkC,MAAT,GAAkBN,QAAlB;AACA,WAAKlC,GAAL,CAASC,OAAT,EAAkBK,QAAlB,EAA4BV,KAA5B,eAAwCY,OAAxC,IAAiDM,8BAAjD;AACD;;AAED;;;;;;gCAGYmB,I,EAAchC,O,EAAiBK,Q,EAAmBQ,c,EAAyB;AAAA,cAA3EmB,IAA2E;;AAAA,cAA7DhC,OAA6D;;AAAA,cAA5CK,QAA4C;;AAAA,cAAzBQ,cAAyB;;AACrF,aAAO,KAAK2B,OAAL,CAAaR,IAAb,EAAmBhC,OAAnB,EAA4BK,QAA5B,EAAsCQ,cAAtC,EAAsD,4BAAOP,IAA7D,CAAP;AACD;;AAED;;;;;;uCAGmB0B,I,EAAchC,O,EAAiBK,Q,EAAmBQ,c,EAAyB;AAAA,cAA3EmB,IAA2E;;AAAA,cAA7DhC,OAA6D;;AAAA,cAA5CK,QAA4C;;AAAA,cAAzBQ,cAAyB;;AAC5F,aAAO,KAAK2B,OAAL,CAAaR,IAAb,EAAmBhC,OAAnB,EAA4BK,QAA5B,EAAsCQ,cAAtC,EAAsD,4BAAOP,IAA7D,EAAmE;AACxEuB,gBAAQ,GADgE;AAExEJ,gBAAQ,CAAC,OAAD,EAAU,MAAV;AAFgE,OAAnE,CAAP;AAID;;AAED;;;;;;;;;;;;;;;;;;;0BAgBMgB,E,EAAmC;AAAA,UAA/BpC,QAA+B,yDAApB,EAAoB;AAAA,UAAhBQ,cAAgB;;AACvCR;AACEqC,sBAAcD,GAAGtB;AADnB,SAEKd,QAFL;AAIA,aAAO,KAAKN,GAAL,CAAS,OAAT,EAAkBM,QAAlB,EAA4B,4BAAOS,KAAnC,EAA0C,EAAED,8BAAF,EAA1C,CAAP;AACD;;AAED;;;;;;;;;;;;;;;;;;;;;yBAkBK4B,E,EAAIpC,Q,EAAUQ,c,EAAgB;AACjCR;AACEqC,sBAAcD,GAAGtB;AADnB,SAEKd,QAFL;AAIA,aAAO,KAAKN,GAAL,CAAS,MAAT,EAAiBM,QAAjB,EAA2B,4BAAOS,KAAlC,EAAyC,EAAED,8BAAF,EAAzC,CAAP;AACD;;AAED;;;;;;;;;;;;;;;;;;;;;yBAkBK4B,E,EAAIpC,Q,EAAUQ,c,EAAgB8B,Q,EAAU;AAC3C,UAAI,OAAOtC,QAAP,KAAoB,UAAxB,EAAoC;AAClCsC,mBAAWtC,QAAX;AACAA,mBAAWG,SAAX;AACD,OAHD,MAGO,IAAI,OAAOK,cAAP,KAA0B,UAA9B,EAA0C;AAC/C8B,mBAAW9B,cAAX;AACAA,yBAAiBL,SAAjB;AACD;;AAED,WAAKoC,KAAL,CAAWH,EAAX,EAAepC,QAAf,EAAyBQ,cAAzB;AACA8B;AACA,WAAKE,IAAL,CAAUJ,EAAV;AACD;;;;;;kBAxekB9D,M","file":"index.js","sourcesContent":["import util from 'util';\nimport levels from 'nightingale-levels';\n\nif (!global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER) {\n  global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER = function () {\n    return { handlers: [], processors: [] };\n  };\n}\n\nfunction getConfigForLogger(key) {\n  return global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER(key);\n}\n\n/**\n * Interface that allows you to log records.\n * This records are treated by handlers\n */\nexport default class Logger {\n  key: string;\n  displayName: ?string;\n\n  /**\n   * Create a new Logger\n   *\n   * @param {string} key\n   * @param {string} [displayName]\n   */\n  constructor(key: string, displayName: ?string) {\n    this.key = key;\n    this.displayName = displayName;\n  }\n\n  getConfig() {\n    return getConfigForLogger(this.key);\n  }\n\n  /**\n   * Create a child logger\n   *\n   * @param {string} childSuffixKey\n   * @param {string} [childDisplayName]\n   * @returns {Logger}\n   */\n  child(childSuffixKey: string, childDisplayName: ?string) {\n    return new Logger(`${this.key}.${childSuffixKey}`, childDisplayName);\n  }\n\n  /**\n   * Create a new Logger with the same key a this attached context\n   *\n   * @example\n   * const loggerMyService = new Logger('app.myService');\n   * function someAction(arg1) {\n     *     const logger = loggerMyService.context({ arg1 });\n     *     logger.info('starting');\n     *     // do stuff\n     *     logger.info('done');\n     * }\n   *\n   * @param {Object} context\n   * @returns {Logger}\n   */\n  context(context: Object) {\n    const logger = new Logger(this.key);\n    logger.setContext(context);\n    return logger;\n  }\n\n  /**\n   * Set the context of this logger\n   *\n   * @param {Object} context\n   */\n  setContext(context: Object) {\n    this._context = context;\n  }\n\n  /**\n   * Extends existing context of this logger\n   *\n   * @param {Object} extendedContext\n   */\n  extendsContext(extendedContext: Object) {\n    Object.assign(this._context, extendedContext);\n  }\n\n  /**\n   * Handle a record\n   *\n   * Use this only if you know what you are doing.\n   *\n   * @param {Object} record\n   */\n  addRecord(record: Object) {\n    let { handlers, processors } = this.getConfig();\n    handlers = handlers.filter(handler => handler.isHandling(record.level, this.key));\n    if (handlers.length === 0) {\n      if (record.level > levels.ERROR) {\n        // eslint-disable-next-line no-console\n        console.log('[nightingale] no logger for > error level.', {\n          key: record.key,\n          message: record.message,\n        });\n      }\n      return;\n    }\n\n    if (processors) {\n      processors.forEach(process => process(record, record.context));\n    }\n\n    handlers.some(handler => handler.handle(record) === false);\n  }\n\n  /**\n   * Log a message\n   *\n   * @param {string} message\n   * @param {Object} metadata\n   * @param {int} [level]\n   * @param {Object} [options]\n   * @return {Logger}\n   */\n  log(\n    message: string,\n    metadata: ?Object,\n    level: number = levels.INFO,\n    options: ?Object = undefined,\n  ) {\n    let context = metadata && metadata.context;\n    if (metadata) {\n      delete metadata.context;\n    }\n\n    let record = {\n      level: level,\n      key: this.key,\n      displayName: this.displayName,\n      datetime: new Date(),\n      message: message,\n      context: context || this._context,\n      metadata: metadata,\n      extra: {},\n    };\n\n    if (options) {\n      record = Object.assign(options, record);\n    }\n\n    this.addRecord(record);\n    return this;\n  }\n\n\n  /**\n   * Log a trace message\n   *\n   * @param {string} message\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @return {Logger}\n   */\n  trace(message, metadata, metadataStyles) {\n    return this.log(message, metadata, levels.TRACE, { metadataStyles });\n  }\n\n\n  /**\n   * Log a debug message\n   *\n   * @param {string} message\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @return {Logger}\n   */\n  debug(message, metadata, metadataStyles) {\n    return this.log(message, metadata, levels.DEBUG, { metadataStyles });\n  }\n\n  /**\n   * Log an info message\n   *\n   * @param {string} message\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @return {Logger}\n   */\n  info(message, metadata, metadataStyles) {\n    return this.log(message, metadata, levels.INFO, { metadataStyles });\n  }\n\n  /**\n   * Log a warn message\n   *\n   * @param {string} message\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @return {Logger}\n   */\n  warn(message, metadata, metadataStyles) {\n    return this.log(message, metadata, levels.WARN, { metadataStyles });\n  }\n\n  /**\n   * Log an error message\n   *\n   * @param {string|Error} message\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @return {Logger}\n   */\n  error(message, metadata = {}, metadataStyles) {\n    if (message instanceof Error) {\n      metadata.error = message;\n      message = `${metadata.error.name}: ${metadata.error.message}`;\n    }\n    return this.log(message, metadata, levels.ERROR, { metadataStyles });\n  }\n\n  /**\n   * Log an alert message\n   *\n   * @param {string} message\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @return {Logger}\n   */\n  alert(message, metadata, metadataStyles) {\n    return this.log(message, metadata, levels.ALERT, { metadataStyles });\n  }\n\n  /**\n   * Log a fatal message\n   *\n   * @param {string} message\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @return {Logger}\n   */\n  fatal(message, metadata, metadataStyles) {\n    return this.log(message, metadata, levels.FATAL, { metadataStyles });\n  }\n\n  /**\n   * Log an inspected value\n   *\n   * @param {*} value\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @return {Logger}\n   */\n  inspectValue(value, metadata, metadataStyles) {\n    // Note: inspect is a special function for node:\n    // https://github.com/nodejs/node/blob/a1bda1b4deb08dfb3e06cb778f0db40023b18318/lib/util.js#L210\n    value = util.inspect(value, { depth: 6 });\n    return this.log(value, metadata, levels.DEBUG, { metadataStyles, styles: ['gray'] });\n  }\n\n  /**\n   * Log a debugged var\n   *\n   * @param {string} varName\n   * @param {*} varValue\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @return {Logger}\n   */\n  inspectVar(varName, varValue, metadata, metadataStyles) {\n    varValue = util.inspect(varValue, { depth: 6 });\n    return this.log(`${varName} = ${varValue}`, metadata, levels.DEBUG, { metadataStyles, styles: ['cyan'] });\n  }\n\n  /**\n   * Alias for infoSuccess\n   *\n   * @param {string} message\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @return {Logger}\n   */\n  success(message, metadata, metadataStyles) {\n    return this.infoSuccess(message, metadata, metadataStyles);\n  }\n\n  /**\n   * Log an info success message\n   *\n   * @param {string} message\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @return {Logger}\n   */\n  infoSuccess(message, metadata, metadataStyles) {\n    return this.log(message, metadata, levels.INFO, {\n      metadataStyles,\n      symbol: '✔',\n      styles: ['green', 'bold'],\n    });\n  }\n\n  /**\n   * Log an debug success message\n   *\n   * @param {string} message\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @return {Logger}\n   */\n  debugSuccess(message, metadata, metadataStyles) {\n    return this.log(message, metadata, levels.DEBUG, {\n      metadataStyles,\n      symbol: '✔',\n      styles: ['green'],\n    });\n  }\n\n  /**\n   * Alias for infoFail\n   *\n   * @param {string} message\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @return {Logger}\n   */\n  fail(message, metadata, metadataStyles) {\n    return this.infoFail(message, metadata, metadataStyles);\n  }\n\n  /**\n   * Log an info fail message\n   *\n   * @param {string} message\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @return {Logger}\n   */\n  infoFail(message, metadata, metadataStyles) {\n    return this.log(message, metadata, levels.INFO, {\n      metadataStyles,\n      symbol: '✖',\n      styles: ['red', 'bold'],\n    });\n  }\n\n  /**\n   * Log an debug fail message\n   *\n   * @param {string} message\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @return {Logger}\n   */\n  debugFail(message, metadata, metadataStyles) {\n    return this.log(message, metadata, levels.DEBUG, {\n      metadataStyles,\n      symbol: '✖',\n      styles: ['red'],\n    });\n  }\n\n  /**\n   * @param {string} [message]\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @param {number} [level = levels.DEBUG]\n   * @returns {*} time to pass to timeEnd\n   */\n  time(message, metadata, metadataStyles, level = levels.DEBUG) {\n    if (message) {\n      this.log(message, metadata, level, { metadataStyles });\n    }\n\n    return Date.now();\n  }\n\n  infoTime(message: string, metadata: ?Object, metadataStyles: ?Object) {\n    return this.time(message, metadata, metadataStyles, levels.INFO);\n  }\n\n  /**\n   * Finds difference between when this method\n   * was called and when the respective time method\n   * was called, then logs out the difference\n   * and deletes the original record\n   *\n   * @param {number=} time return of previous call to time()\n   * @param {string} message\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @param {number} [level = levels.DEBUG]\n   */\n  timeEnd(time, message, metadata = {}, metadataStyles, level = levels.DEBUG, options) {\n    const now = Date.now();\n\n    const diffTime = now - time;\n\n    if (diffTime < 1000) {\n      metadata.readableTime = `${diffTime}ms`;\n    } else {\n      const seconds = diffTime > 1000 && Math.floor(diffTime / 1000);\n      const ms = diffTime - (seconds * 1000);\n      metadata.readableTime = `${seconds ? `${seconds}s and ` : ''}${ms}ms`;\n    }\n\n    metadata.timeMs = diffTime;\n    this.log(message, metadata, level, { ...options, metadataStyles });\n  }\n\n  /**\n   * Like timeEnd, but with INFO level\n   */\n  infoTimeEnd(time: number, message: string, metadata: ?Object, metadataStyles: ?Object) {\n    return this.timeEnd(time, message, metadata, metadataStyles, levels.INFO);\n  }\n\n  /**\n   * Like timeEnd, but with INFO level\n   */\n  infoSuccessTimeEnd(time: number, message: string, metadata: ?Object, metadataStyles: ?Object) {\n    return this.timeEnd(time, message, metadata, metadataStyles, levels.INFO, {\n      symbol: '✔',\n      styles: ['green', 'bold'],\n    });\n  }\n\n  /**\n   * Log an enter in a function\n   *\n   * @example\n   * class A {\n     *   method(arg1) {\n     *     logger.enter(method, { arg1 });\n     *     // Do your stuff\n     *   }\n     * }\n   *\n   * @param {Function} fn\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @return {Logger}\n   */\n  enter(fn, metadata = {}, metadataStyles) {\n    metadata = {\n      functionName: fn.name,\n      ...metadata,\n    };\n    return this.log('enter', metadata, levels.TRACE, { metadataStyles });\n  }\n\n  /**\n   * Log an exit in a function\n   *\n   * @example\n   * const logger = new ConsoleLogger('myNamespace.A');\n   * class A {\n     *   method(arg1) {\n     *     // Do your stuff\n     *     logger.exit(method, { arg1 });\n     *   }\n     * }\n   *\n   *\n   * @param {Function} fn\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @return {Logger}\n   */\n  exit(fn, metadata, metadataStyles) {\n    metadata = {\n      functionName: fn.name,\n      ...metadata,\n    };\n    return this.log('exit', metadata, levels.TRACE, { metadataStyles });\n  }\n\n  /**\n   * Wrap around a function to log enter and exit of a function\n   *\n   * @example\n   * const logger = new ConsoleLogger('myNamespace.A');\n   * class A {\n     *   method() {\n     *     logger.wrap(method, () => {\n     *       // Do your stuff\n     *     });\n     *   }\n     * }\n   *\n   * @param {Function} fn\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @param {Function} callback\n   */\n  wrap(fn, metadata, metadataStyles, callback) {\n    if (typeof metadata === 'function') {\n      callback = metadata;\n      metadata = undefined;\n    } else if (typeof metadataStyles === 'function') {\n      callback = metadataStyles;\n      metadataStyles = undefined;\n    }\n\n    this.enter(fn, metadata, metadataStyles);\n    callback();\n    this.exit(fn);\n  }\n}\n"]}