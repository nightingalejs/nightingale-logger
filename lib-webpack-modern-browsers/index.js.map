{"version":3,"sources":["../src/index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import util from 'util';\nimport levels from 'nightingale-levels';\n\nif (!global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER) {\n    global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER = function () {\n        return { handlers: [], processors: [] };\n    };\n}\n\nfunction getConfigForLogger(key) {\n    return global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER(key);\n}\n\n/**\n * Interface that allows you to log records.\n * This records are treated by handlers\n */\nexport default class Logger {\n    key: string;\n    displayName: ?string;\n\n    /**\n     * Create a new Logger\n     *\n     * @param {string} key\n     * @param {string} [displayName]\n     */\n    constructor(key: string, displayName: ?string) {\n        this.key = key;\n        this.displayName = displayName;\n    }\n\n    getConfig() {\n        return getConfigForLogger(this.key);\n    }\n\n    /**\n     * Create a child logger\n     *\n     * @param {string} childSuffixKey\n     * @param {string} [childDisplayName]\n     * @returns {Logger}\n     */\n    child(childSuffixKey: string, childDisplayName: ?string) {\n        return new Logger(`${this.key}.${childSuffixKey}`, childDisplayName);\n    }\n\n    /**\n     * Create a new Logger with the same key a this attached context\n     *\n     * @example\n     * const loggerMyService = new Logger('app.myService');\n     * function someAction(arg1) {\n     *     const logger = loggerMyService.context({ arg1 });\n     *     logger.info('starting');\n     *     // do stuff\n     *     logger.info('done');\n     * }\n     *\n     * @param {Object} context\n     * @returns {Logger}\n     */\n    context(context: Object) {\n        const logger = new Logger(this.key);\n        logger.setContext(context);\n        return logger;\n    }\n\n    /**\n     * Set the context of this logger\n     *\n     * @param {Object} context\n     */\n    setContext(context: Object) {\n        this._context = context;\n    }\n\n    /**\n     * Handle a record\n     *\n     * Use this only if you know what you are doing.\n     *\n     * @param {Object} record\n     */\n    addRecord(record: Object) {\n        let { handlers, processors } = this.getConfig();\n        handlers = handlers.filter(handler => handler.isHandling(record.level, this.key));\n        if (handlers.length === 0) {\n            if (record.level > levels.ERROR) {\n                // eslint-disable-next-line no-console\n                console.log('[nightingale] no logger for > error level.', {\n                    key: record.key,\n                    message: record.message,\n                });\n            }\n            return;\n        }\n\n        if (processors) {\n            processors.forEach(process => process(record, record.context));\n        }\n\n        handlers.some(handler => handler.handle(record) === false);\n    }\n\n    /**\n     * Log a message\n     *\n     * @param {string} message\n     * @param {Object} metadata\n     * @param {int} [level]\n     * @param {Object} [options]\n     * @return {Logger}\n     */\n    log(message: string, metadata: ?Object, level: number = levels.INFO, options: ?Object = undefined) {\n        let context = metadata && metadata.context;\n        if (metadata) {\n            delete metadata.context;\n        }\n\n        let record = {\n            level: level,\n            key: this.key,\n            displayName: this.displayName,\n            datetime: new Date(),\n            message: message,\n            context: context || this._context,\n            metadata: metadata,\n            extra: {},\n        };\n\n        if (options) {\n            record = Object.assign(options, record);\n        }\n\n        this.addRecord(record);\n        return this;\n    }\n\n\n    /**\n     * Log a trace message\n     *\n     * @param {string} message\n     * @param {Object} [metadata]\n     * @param {Object} [metadataStyles]\n     * @return {Logger}\n     */\n    trace(message, metadata, metadataStyles) {\n        return this.log(message, metadata, levels.TRACE, { metadataStyles });\n    }\n\n\n    /**\n     * Log a debug message\n     *\n     * @param {string} message\n     * @param {Object} [metadata]\n     * @param {Object} [metadataStyles]\n     * @return {Logger}\n     */\n    debug(message, metadata, metadataStyles) {\n        return this.log(message, metadata, levels.DEBUG, { metadataStyles });\n    }\n\n    /**\n     * Log an info message\n     *\n     * @param {string} message\n     * @param {Object} [metadata]\n     * @param {Object} [metadataStyles]\n     * @return {Logger}\n     */\n    info(message, metadata, metadataStyles) {\n        return this.log(message, metadata, levels.INFO, { metadataStyles });\n    }\n\n    /**\n     * Log a warn message\n     *\n     * @param {string} message\n     * @param {Object} [metadata]\n     * @param {Object} [metadataStyles]\n     * @return {Logger}\n     */\n    warn(message, metadata, metadataStyles) {\n        return this.log(message, metadata, levels.WARN, { metadataStyles });\n    }\n\n    /**\n     * Log an error message\n     *\n     * @param {string|Error} message\n     * @param {Object} [metadata]\n     * @param {Object} [metadataStyles]\n     * @return {Logger}\n     */\n    error(message, metadata = {}, metadataStyles) {\n        if (message instanceof Error) {\n            metadata.error = message;\n            message = `${metadata.error.name}: ${metadata.error.message}`;\n        }\n        return this.log(message, metadata, levels.ERROR, { metadataStyles });\n    }\n\n    /**\n     * Log an alert message\n     *\n     * @param {string} message\n     * @param {Object} [metadata]\n     * @param {Object} [metadataStyles]\n     * @return {Logger}\n     */\n    alert(message, metadata, metadataStyles) {\n        return this.log(message, metadata, levels.ALERT, { metadataStyles });\n    }\n\n    /**\n     * Log a fatal message\n     *\n     * @param {string} message\n     * @param {Object} [metadata]\n     * @param {Object} [metadataStyles]\n     * @return {Logger}\n     */\n    fatal(message, metadata, metadataStyles) {\n        return this.log(message, metadata, levels.FATAL, { metadataStyles });\n    }\n\n    /**\n     * Log an inspected value\n     *\n     * @param {*} value\n     * @param {Object} [metadata]\n     * @param {Object} [metadataStyles]\n     * @return {Logger}\n     */\n    inspectValue(value, metadata, metadataStyles) {\n        // Note: inspect is a special function for node:\n        // https://github.com/nodejs/node/blob/a1bda1b4deb08dfb3e06cb778f0db40023b18318/lib/util.js#L210\n        value = util.inspect(value, { depth: 6 });\n        return this.log(value, metadata, levels.DEBUG, { metadataStyles, styles: ['gray'] });\n    }\n\n    /**\n     * Log a debugged var\n     *\n     * @param {string} varName\n     * @param {*} varValue\n     * @param {Object} [metadata]\n     * @param {Object} [metadataStyles]\n     * @return {Logger}\n     */\n    inspectVar(varName, varValue, metadata, metadataStyles) {\n        varValue = util.inspect(varValue, { depth: 6 });\n        return this.log(`${varName} = ${varValue}`, metadata, levels.DEBUG, { metadataStyles, styles: ['cyan'] });\n    }\n\n    /**\n     * Alias for infoSuccess\n     *\n     * @param {string} message\n     * @param {Object} [metadata]\n     * @param {Object} [metadataStyles]\n     * @return {Logger}\n     */\n    success(message, metadata, metadataStyles) {\n        return this.infoSuccess(message, metadata, metadataStyles);\n    }\n\n    /**\n     * Log an info success message\n     *\n     * @param {string} message\n     * @param {Object} [metadata]\n     * @param {Object} [metadataStyles]\n     * @return {Logger}\n     */\n    infoSuccess(message, metadata, metadataStyles) {\n        return this.log(message, metadata, levels.INFO, {\n            metadataStyles,\n            symbol: '✔',\n            styles: ['green', 'bold'],\n        });\n    }\n\n    /**\n     * Log an debug success message\n     *\n     * @param {string} message\n     * @param {Object} [metadata]\n     * @param {Object} [metadataStyles]\n     * @return {Logger}\n     */\n    debugSuccess(message, metadata, metadataStyles) {\n        return this.log(message, metadata, levels.DEBUG, {\n            metadataStyles,\n            symbol: '✔',\n            styles: ['green'],\n        });\n    }\n\n    /**\n     * Alias for infoFail\n     *\n     * @param {string} message\n     * @param {Object} [metadata]\n     * @param {Object} [metadataStyles]\n     * @return {Logger}\n     */\n    fail(message, metadata, metadataStyles) {\n        return this.infoFail(message, metadata, metadataStyles);\n    }\n\n    /**\n     * Log an info fail message\n     *\n     * @param {string} message\n     * @param {Object} [metadata]\n     * @param {Object} [metadataStyles]\n     * @return {Logger}\n     */\n    infoFail(message, metadata, metadataStyles) {\n        return this.log(message, metadata, levels.INFO, {\n            metadataStyles,\n            symbol: '✖',\n            styles: ['red', 'bold'],\n        });\n    }\n\n    /**\n     * Log an debug fail message\n     *\n     * @param {string} message\n     * @param {Object} [metadata]\n     * @param {Object} [metadataStyles]\n     * @return {Logger}\n     */\n    debugFail(message, metadata, metadataStyles) {\n        return this.log(message, metadata, levels.DEBUG, {\n            metadataStyles,\n            symbol: '✖',\n            styles: ['red'],\n        });\n    }\n\n    /**\n     * @param {string} [message]\n     * @param {Object} [metadata]\n     * @param {Object} [metadataStyles]\n     * @param {number} [level = levels.DEBUG]\n     * @returns {*} time to pass to timeEnd\n     */\n    time(message, metadata, metadataStyles, level = levels.DEBUG) {\n        if (message) {\n            this.log(message, metadata, level, { metadataStyles });\n        }\n\n        return Date.now();\n    }\n\n    infoTime(message: string, metadata: ?Object, metadataStyles: ?Object) {\n        return this.time(message, metadata, metadataStyles, levels.INFO);\n    }\n\n    /**\n     * Finds difference between when this method\n     * was called and when the respective time method\n     * was called, then logs out the difference\n     * and deletes the original record\n     *\n     * @param {number=} time return of previous call to time()\n     * @param {string} message\n     * @param {Object} [metadata]\n     * @param {Object} [metadataStyles]\n     * @param {number} [level = levels.DEBUG]\n     */\n    timeEnd(time, message, metadata = {}, metadataStyles, level = levels.DEBUG, options) {\n        const now = Date.now();\n\n        const diffTime = now - time;\n\n        if (diffTime < 1000) {\n            metadata.readableTime = `${diffTime}ms`;\n        } else {\n            const seconds = diffTime > 1000 && Math.floor(diffTime / 1000);\n            const ms = diffTime - (seconds * 1000);\n            metadata.readableTime = `${seconds ? `${seconds}s and ` : ''}${ms}ms`;\n        }\n\n        metadata.timeMs = diffTime;\n        this.log(message, metadata, level, { ...options, metadataStyles });\n    }\n\n    /**\n     * Like timeEnd, but with INFO level\n     */\n    infoTimeEnd(time: number, message: string, metadata: ?Object, metadataStyles: ?Object) {\n        return this.timeEnd(time, message, metadata, metadataStyles, levels.INFO);\n    }\n\n    /**\n     * Like timeEnd, but with INFO level\n     */\n    infoSuccessTimeEnd(time: number, message: string, metadata: ?Object, metadataStyles: ?Object) {\n        return this.timeEnd(time, message, metadata, metadataStyles, levels.INFO, {\n            symbol: '✔',\n            styles: ['green', 'bold'],\n        });\n    }\n\n    /**\n     * Log an enter in a function\n     *\n     * @example\n     * class A {\n     *   method(arg1) {\n     *     logger.enter(method, { arg1 });\n     *     // Do your stuff\n     *   }\n     * }\n     *\n     * @param {Function} fn\n     * @param {Object} [metadata]\n     * @param {Object} [metadataStyles]\n     * @return {Logger}\n     */\n    enter(fn, metadata = {}, metadataStyles) {\n        metadata = {\n            functionName: fn.name,\n            ...metadata,\n        };\n        return this.log('enter', metadata, levels.TRACE, { metadataStyles });\n    }\n\n    /**\n     * Log an exit in a function\n     *\n     * @example\n     * const logger = new ConsoleLogger('myNamespace.A');\n     * class A {\n     *   method(arg1) {\n     *     // Do your stuff\n     *     logger.exit(method, { arg1 });\n     *   }\n     * }\n     *\n     *\n     * @param {Function} fn\n     * @param {Object} [metadata]\n     * @param {Object} [metadataStyles]\n     * @return {Logger}\n     */\n    exit(fn, metadata, metadataStyles) {\n        metadata = {\n            functionName: fn.name,\n            ...metadata,\n        };\n        return this.log('exit', metadata, levels.TRACE, { metadataStyles });\n    }\n\n    /**\n     * Wrap around a function to log enter and exit of a function\n     *\n     * @example\n     * const logger = new ConsoleLogger('myNamespace.A');\n     * class A {\n     *   method() {\n     *     logger.wrap(method, () => {\n     *       // Do your stuff\n     *     });\n     *   }\n     * }\n     *\n     * @param {Function} fn\n     * @param {Object} [metadata]\n     * @param {Object} [metadataStyles]\n     * @param {Function} callback\n     */\n    wrap(fn, metadata, metadataStyles, callback) {\n        if (typeof metadata === 'function') {\n            callback = metadata;\n            metadata = undefined;\n        } else if (typeof metadataStyles === 'function') {\n            callback = metadataStyles;\n            metadataStyles = undefined;\n        }\n\n        this.enter(fn, metadata, metadataStyles);\n        callback();\n        this.exit(fn);\n    }\n}\n"]}