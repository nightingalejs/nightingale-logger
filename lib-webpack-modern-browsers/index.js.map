{"version":3,"sources":["../src/index.js"],"names":["util","levels","global","__NIGHTINGALE_GET_CONFIG_FOR_LOGGER","handlers","processors","getConfigForLogger","key","Logger","constructor","displayName","getConfig","child","childSuffixKey","childDisplayName","context","logger","setContext","_context","extendsContext","extendedContext","Object","assign","addRecord","record","filter","handler","isHandling","level","length","ERROR","console","log","message","forEach","process","some","handle","metadata","INFO","options","undefined","datetime","Date","extra","trace","metadataStyles","TRACE","debug","DEBUG","info","warn","WARN","error","Error","name","alert","ALERT","fatal","FATAL","inspectValue","value","inspect","depth","styles","inspectVar","varName","varValue","success","infoSuccess","symbol","debugSuccess","fail","infoFail","debugFail","time","now","infoTime","timeEnd","diffTime","readableTime","seconds","Math","floor","ms","timeMs","infoTimeEnd","infoSuccessTimeEnd","enter","fn","functionName","exit","wrap","callback"],"mappings":"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","file":"index.js","sourcesContent":["import util from 'util';\nimport levels from 'nightingale-levels';\n\nif (!global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER) {\n  global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER = function () {\n    return { handlers: [], processors: [] };\n  };\n}\n\n/** @private */\nfunction getConfigForLogger(key) {\n  return global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER(key);\n}\n\n/**\n * Interface that allows you to log records.\n * This records are treated by handlers\n */\nexport default class Logger {\n  key: string;\n  displayName: ?string;\n\n  /**\n   * Create a new Logger\n   *\n   * @param {string} key\n   * @param {string} [displayName]\n   */\n  constructor(key: string, displayName: ?string) {\n    this.key = key;\n    this.displayName = displayName;\n  }\n\n  getConfig() {\n    return getConfigForLogger(this.key);\n  }\n\n  /**\n   * Create a child logger\n   *\n   * @param {string} childSuffixKey\n   * @param {string} [childDisplayName]\n   * @returns {Logger}\n   */\n  child(childSuffixKey: string, childDisplayName: ?string) {\n    return new Logger(`${this.key}.${childSuffixKey}`, childDisplayName);\n  }\n\n  /**\n   * Create a new Logger with the same key a this attached context\n   *\n   * @example\n   * const loggerMyService = new Logger('app.myService');\n   * function someAction(arg1) {\n     *     const logger = loggerMyService.context({ arg1 });\n     *     logger.info('starting');\n     *     // do stuff\n     *     logger.info('done');\n     * }\n   *\n   * @param {Object} context\n   * @returns {Logger}\n   */\n  context(context: Object) {\n    const logger = new Logger(this.key);\n    logger.setContext(context);\n    return logger;\n  }\n\n  /**\n   * Set the context of this logger\n   *\n   * @param {Object} context\n   */\n  setContext(context: Object) {\n    this._context = context;\n  }\n\n  /**\n   * Extends existing context of this logger\n   *\n   * @param {Object} extendedContext\n   */\n  extendsContext(extendedContext: Object) {\n    Object.assign(this._context, extendedContext);\n  }\n\n  /**\n   * Handle a record\n   *\n   * Use this only if you know what you are doing.\n   *\n   * @param {Object} record\n   */\n  addRecord(record: Object) {\n    let { handlers, processors } = this.getConfig();\n    handlers = handlers.filter(handler => handler.isHandling(record.level, this.key));\n    if (handlers.length === 0) {\n      if (record.level > levels.ERROR) {\n        // eslint-disable-next-line no-console\n        console.log('[nightingale] no logger for > error level.', {\n          key: record.key,\n          message: record.message,\n        });\n      }\n      return;\n    }\n\n    if (processors) {\n      processors.forEach(process => process(record, record.context));\n    }\n\n    handlers.some(handler => handler.handle(record) === false);\n  }\n\n  /**\n   * Log a message\n   *\n   * @param {string} message\n   * @param {Object} metadata\n   * @param {int} [level]\n   * @param {Object} [options]\n   * @return {Logger}\n   */\n  log(\n    message: string,\n    metadata: ?Object,\n    level: number = levels.INFO,\n    options: ?Object = undefined,\n  ) {\n    let context = metadata && metadata.context;\n    if (metadata) {\n      delete metadata.context;\n    }\n\n    let record = {\n      level: level,\n      key: this.key,\n      displayName: this.displayName,\n      datetime: new Date(),\n      message: message,\n      context: context || this._context,\n      metadata: metadata,\n      extra: {},\n    };\n\n    if (options) {\n      record = Object.assign(options, record);\n    }\n\n    this.addRecord(record);\n    return this;\n  }\n\n\n  /**\n   * Log a trace message\n   *\n   * @param {string} message\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @return {Logger}\n   */\n  trace(message, metadata, metadataStyles) {\n    return this.log(message, metadata, levels.TRACE, { metadataStyles });\n  }\n\n\n  /**\n   * Log a debug message\n   *\n   * @param {string} message\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @return {Logger}\n   */\n  debug(message, metadata, metadataStyles) {\n    return this.log(message, metadata, levels.DEBUG, { metadataStyles });\n  }\n\n  /**\n   * Log an info message\n   *\n   * @param {string} message\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @return {Logger}\n   */\n  info(message, metadata, metadataStyles) {\n    return this.log(message, metadata, levels.INFO, { metadataStyles });\n  }\n\n  /**\n   * Log a warn message\n   *\n   * @param {string} message\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @return {Logger}\n   */\n  warn(message, metadata, metadataStyles) {\n    return this.log(message, metadata, levels.WARN, { metadataStyles });\n  }\n\n  /**\n   * Log an error message\n   *\n   * @param {string|Error} message\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @return {Logger}\n   */\n  error(message, metadata = {}, metadataStyles) {\n    if (message instanceof Error) {\n      metadata.error = message;\n      message = `${metadata.error.name}: ${metadata.error.message}`;\n    }\n    return this.log(message, metadata, levels.ERROR, { metadataStyles });\n  }\n\n  /**\n   * Log an alert message\n   *\n   * @param {string} message\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @return {Logger}\n   */\n  alert(message, metadata, metadataStyles) {\n    return this.log(message, metadata, levels.ALERT, { metadataStyles });\n  }\n\n  /**\n   * Log a fatal message\n   *\n   * @param {string} message\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @return {Logger}\n   */\n  fatal(message, metadata, metadataStyles) {\n    return this.log(message, metadata, levels.FATAL, { metadataStyles });\n  }\n\n  /**\n   * Log an inspected value\n   *\n   * @param {*} value\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @return {Logger}\n   */\n  inspectValue(value, metadata, metadataStyles) {\n    // Note: inspect is a special function for node:\n    // https://github.com/nodejs/node/blob/a1bda1b4deb08dfb3e06cb778f0db40023b18318/lib/util.js#L210\n    value = util.inspect(value, { depth: 6 });\n    return this.log(value, metadata, levels.DEBUG, { metadataStyles, styles: ['gray'] });\n  }\n\n  /**\n   * Log a debugged var\n   *\n   * @param {string} varName\n   * @param {*} varValue\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @return {Logger}\n   */\n  inspectVar(varName, varValue, metadata, metadataStyles) {\n    varValue = util.inspect(varValue, { depth: 6 });\n    return this.log(`${varName} = ${varValue}`, metadata, levels.DEBUG, { metadataStyles, styles: ['cyan'] });\n  }\n\n  /**\n   * Alias for infoSuccess\n   *\n   * @param {string} message\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @return {Logger}\n   */\n  success(message, metadata, metadataStyles) {\n    return this.infoSuccess(message, metadata, metadataStyles);\n  }\n\n  /**\n   * Log an info success message\n   *\n   * @param {string} message\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @return {Logger}\n   */\n  infoSuccess(message, metadata, metadataStyles) {\n    return this.log(message, metadata, levels.INFO, {\n      metadataStyles,\n      symbol: '✔',\n      styles: ['green', 'bold'],\n    });\n  }\n\n  /**\n   * Log an debug success message\n   *\n   * @param {string} message\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @return {Logger}\n   */\n  debugSuccess(message, metadata, metadataStyles) {\n    return this.log(message, metadata, levels.DEBUG, {\n      metadataStyles,\n      symbol: '✔',\n      styles: ['green'],\n    });\n  }\n\n  /**\n   * Alias for infoFail\n   *\n   * @param {string} message\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @return {Logger}\n   */\n  fail(message, metadata, metadataStyles) {\n    return this.infoFail(message, metadata, metadataStyles);\n  }\n\n  /**\n   * Log an info fail message\n   *\n   * @param {string} message\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @return {Logger}\n   */\n  infoFail(message, metadata, metadataStyles) {\n    return this.log(message, metadata, levels.INFO, {\n      metadataStyles,\n      symbol: '✖',\n      styles: ['red', 'bold'],\n    });\n  }\n\n  /**\n   * Log an debug fail message\n   *\n   * @param {string} message\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @return {Logger}\n   */\n  debugFail(message, metadata, metadataStyles) {\n    return this.log(message, metadata, levels.DEBUG, {\n      metadataStyles,\n      symbol: '✖',\n      styles: ['red'],\n    });\n  }\n\n  /**\n   * @param {string} [message]\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @param {number} [level = levels.DEBUG]\n   * @returns {*} time to pass to timeEnd\n   */\n  time(message, metadata, metadataStyles, level = levels.DEBUG) {\n    if (message) {\n      this.log(message, metadata, level, { metadataStyles });\n    }\n\n    return Date.now();\n  }\n\n  infoTime(message: string, metadata: ?Object, metadataStyles: ?Object) {\n    return this.time(message, metadata, metadataStyles, levels.INFO);\n  }\n\n  /**\n   * Finds difference between when this method\n   * was called and when the respective time method\n   * was called, then logs out the difference\n   * and deletes the original record\n   *\n   * @param {number=} time return of previous call to time()\n   * @param {string} message\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @param {number} [level = levels.DEBUG]\n   */\n  timeEnd(time, message, metadata = {}, metadataStyles, level = levels.DEBUG, options) {\n    const now = Date.now();\n\n    const diffTime = now - time;\n\n    if (diffTime < 1000) {\n      metadata.readableTime = `${diffTime}ms`;\n    } else {\n      const seconds = diffTime > 1000 && Math.floor(diffTime / 1000);\n      const ms = diffTime - (seconds * 1000);\n      metadata.readableTime = `${seconds ? `${seconds}s and ` : ''}${ms}ms`;\n    }\n\n    metadata.timeMs = diffTime;\n    this.log(message, metadata, level, { ...options, metadataStyles });\n  }\n\n  /**\n   * Like timeEnd, but with INFO level\n   */\n  infoTimeEnd(time: number, message: string, metadata: ?Object, metadataStyles: ?Object) {\n    return this.timeEnd(time, message, metadata, metadataStyles, levels.INFO);\n  }\n\n  /**\n   * Like timeEnd, but with INFO level\n   */\n  infoSuccessTimeEnd(time: number, message: string, metadata: ?Object, metadataStyles: ?Object) {\n    return this.timeEnd(time, message, metadata, metadataStyles, levels.INFO, {\n      symbol: '✔',\n      styles: ['green', 'bold'],\n    });\n  }\n\n  /**\n   * Log an enter in a function\n   *\n   * @example\n   * class A {\n     *   method(arg1) {\n     *     logger.enter(method, { arg1 });\n     *     // Do your stuff\n     *   }\n     * }\n   *\n   * @param {Function} fn\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @return {Logger}\n   */\n  enter(fn, metadata = {}, metadataStyles) {\n    metadata = {\n      functionName: fn.name,\n      ...metadata,\n    };\n    return this.log('enter', metadata, levels.TRACE, { metadataStyles });\n  }\n\n  /**\n   * Log an exit in a function\n   *\n   * @example\n   * const logger = new ConsoleLogger('myNamespace.A');\n   * class A {\n     *   method(arg1) {\n     *     // Do your stuff\n     *     logger.exit(method, { arg1 });\n     *   }\n     * }\n   *\n   *\n   * @param {Function} fn\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @return {Logger}\n   */\n  exit(fn, metadata, metadataStyles) {\n    metadata = {\n      functionName: fn.name,\n      ...metadata,\n    };\n    return this.log('exit', metadata, levels.TRACE, { metadataStyles });\n  }\n\n  /**\n   * Wrap around a function to log enter and exit of a function\n   *\n   * @example\n   * const logger = new ConsoleLogger('myNamespace.A');\n   * class A {\n     *   method() {\n     *     logger.wrap(method, () => {\n     *       // Do your stuff\n     *     });\n     *   }\n     * }\n   *\n   * @param {Function} fn\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @param {Function} callback\n   */\n  wrap(fn, metadata, metadataStyles, callback) {\n    if (typeof metadata === 'function') {\n      callback = metadata;\n      metadata = undefined;\n    } else if (typeof metadataStyles === 'function') {\n      callback = metadataStyles;\n      metadataStyles = undefined;\n    }\n\n    this.enter(fn, metadata, metadataStyles);\n    callback();\n    this.exit(fn);\n  }\n}\n"]}