{"version":3,"sources":["../src/index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import util from 'util';\nimport levels from 'nightingale-levels';\n\nif (!global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER) {\n    global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER = function () {\n        return { handlers: [], processors: [] };\n    };\n}\n\nfunction getConfigForLogger(key) {\n    return global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER(key);\n}\n\n/**\n * Interface that allows you to log records.\n * This records are treated by handlers\n */\nexport default class Logger {\n    key: string;\n    displayName: string;\n\n    /**\n     * Create a new Logger\n     *\n     * @param {string} key\n     * @param {string} [displayName]\n     */\n    constructor(key, displayName) {\n        this.key = key;\n        this.displayName = displayName;\n    }\n\n    getConfig() {\n        return getConfigForLogger(this.key);\n    }\n\n    /**\n     * Create a child logger\n     *\n     * @param {string} childSuffixKey\n     * @param {string} [childDisplayName]\n     * @returns {Logger}\n     */\n    child(childSuffixKey, childDisplayName) {\n        return new Logger(`${this.key}.${childSuffixKey}`, childDisplayName);\n    }\n\n    /**\n     * Create a new Logger with the same key a this attached context\n     *\n     * @example\n     * const loggerMyService = new Logger('app.myService');\n     * function someAction(arg1) {\n     *     const logger = loggerMyService.context({ arg1 });\n     *     logger.info('starting');\n     *     // do stuff\n     *     logger.info('done');\n     * }\n     *\n     * @param {Object} context\n     * @returns {Logger}\n     */\n    context(context) {\n        const logger = new Logger(this.key);\n        logger.setContext(context);\n        return logger;\n    }\n\n    /**\n     * Set the context of this logger\n     *\n     * @param {Object} context\n     */\n    setContext(context) {\n        this._context = context;\n    }\n\n    /**\n     * Handle a record\n     *\n     * Use this only if you know what you are doing.\n     *\n     * @param {Object} record\n     */\n    addRecord(record) {\n        let { handlers, processors } = this.getConfig();\n        handlers = handlers.filter(handler => handler.isHandling(record.level, this.key));\n        if (handlers.length === 0) {\n            return;\n        }\n\n        if (processors) {\n            processors.forEach(process => process(record, record.context));\n        }\n\n        handlers.some(handler => handler.handle(record) === false);\n    }\n\n    /**\n     * Log a message\n     *\n     * @param {string} message\n     * @param {Object} metadata\n     * @param {int} [level]\n     * @param {Object} [options]\n     * @return {Logger}\n     */\n    log(message, metadata, level = levels.INFO, options = undefined) {\n        let context = metadata && metadata.context;\n        if (metadata) {\n            delete metadata.context;\n        }\n\n        let record = {\n            level: level,\n            key: this.key,\n            displayName: this.displayName,\n            datetime: new Date(),\n            message: message,\n            context: context || this._context,\n            metadata: metadata,\n            extra: {},\n        };\n\n        if (options) {\n            record = Object.assign(options, record);\n        }\n\n        this.addRecord(record);\n        return this;\n    }\n\n\n    /**\n     * Log a trace message\n     *\n     * @param {string} message\n     * @param {Object} [metadata]\n     * @param {Object} [metadataStyles]\n     * @return {Logger}\n     */\n    trace(message, metadata, metadataStyles) {\n        return this.log(message, metadata, levels.TRACE, { metadataStyles });\n    }\n\n\n    /**\n     * Log a debug message\n     *\n     * @param {string} message\n     * @param {Object} [metadata]\n     * @param {Object} [metadataStyles]\n     * @return {Logger}\n     */\n    debug(message, metadata, metadataStyles) {\n        return this.log(message, metadata, levels.DEBUG, { metadataStyles });\n    }\n\n    /**\n     * Log an info message\n     *\n     * @param {string} message\n     * @param {Object} [metadata]\n     * @param {Object} [metadataStyles]\n     * @return {Logger}\n     */\n    info(message, metadata, metadataStyles) {\n        return this.log(message, metadata, levels.INFO, { metadataStyles });\n    }\n\n    /**\n     * Log a warn message\n     *\n     * @param {string} message\n     * @param {Object} [metadata]\n     * @param {Object} [metadataStyles]\n     * @return {Logger}\n     */\n    warn(message, metadata, metadataStyles) {\n        return this.log(message, metadata, levels.WARN, { metadataStyles });\n    }\n\n    /**\n     * Log an error message\n     *\n     * @param {string|Error} message\n     * @param {Object} [metadata]\n     * @param {Object} [metadataStyles]\n     * @return {Logger}\n     */\n    error(message, metadata = {}, metadataStyles) {\n        if (message instanceof Error) {\n            metadata.error = message;\n            message = `${metadata.error.name}: ${metadata.error.message}`;\n        }\n        return this.log(message, metadata, levels.ERROR, { metadataStyles });\n    }\n\n    /**\n     * Log an alert message\n     *\n     * @param {string} message\n     * @param {Object} [metadata]\n     * @param {Object} [metadataStyles]\n     * @return {Logger}\n     */\n    alert(message, metadata, metadataStyles) {\n        return this.log(message, metadata, levels.ALERT, { metadataStyles });\n    }\n\n    /**\n     * Log a fatal message\n     *\n     * @param {string} message\n     * @param {Object} [metadata]\n     * @param {Object} [metadataStyles]\n     * @return {Logger}\n     */\n    fatal(message, metadata, metadataStyles) {\n        return this.log(message, metadata, levels.FATAL, { metadataStyles });\n    }\n\n    /**\n     * Log an inspected value\n     *\n     * @param {*} value\n     * @param {Object} [metadata]\n     * @param {Object} [metadataStyles]\n     * @return {Logger}\n     */\n    inspectValue(value, metadata, metadataStyles) {\n        // Note: inspect is a special function for node:\n        // https://github.com/nodejs/node/blob/a1bda1b4deb08dfb3e06cb778f0db40023b18318/lib/util.js#L210\n        value = util.inspect(value, { depth: 6 });\n        return this.log(value, metadata, levels.DEBUG, { metadataStyles, styles: ['gray'] });\n    }\n\n    /**\n     * Log a debugged var\n     *\n     * @param {string} varName\n     * @param {*} varValue\n     * @param {Object} [metadata]\n     * @param {Object} [metadataStyles]\n     * @return {Logger}\n     */\n    inspectVar(varName, varValue, metadata, metadataStyles) {\n        varValue = util.inspect(varValue, { depth: 6 });\n        return this.log(`${varName} = ${varValue}`, metadata, levels.DEBUG, { metadataStyles, styles: ['cyan'] });\n    }\n\n    /**\n     * Alias for infoSuccess\n     *\n     * @param {string} message\n     * @param {Object} [metadata]\n     * @param {Object} [metadataStyles]\n     * @return {Logger}\n     */\n    success(message, metadata, metadataStyles) {\n        return this.infoSuccess(message, metadata, metadataStyles);\n    }\n\n    /**\n     * Log an info success message\n     *\n     * @param {string} message\n     * @param {Object} [metadata]\n     * @param {Object} [metadataStyles]\n     * @return {Logger}\n     */\n    infoSuccess(message, metadata, metadataStyles) {\n        return this.log(message, metadata, levels.INFO, {\n            metadataStyles,\n            symbol: '✔',\n            styles: ['green', 'bold'],\n        });\n    }\n\n    /**\n     * Log an debug success message\n     *\n     * @param {string} message\n     * @param {Object} [metadata]\n     * @param {Object} [metadataStyles]\n     * @return {Logger}\n     */\n    debugSuccess(message, metadata, metadataStyles) {\n        return this.log(message, metadata, levels.DEBUG, {\n            metadataStyles,\n            symbol: '✔',\n            styles: ['green'],\n        });\n    }\n\n    /**\n     * Alias for infoFail\n     *\n     * @param {string} message\n     * @param {Object} [metadata]\n     * @param {Object} [metadataStyles]\n     * @return {Logger}\n     */\n    fail(message, metadata, metadataStyles) {\n        return this.infoSuccess(message, metadata, metadataStyles);\n    }\n\n    /**\n     * Log an info fail message\n     *\n     * @param {string} message\n     * @param {Object} [metadata]\n     * @param {Object} [metadataStyles]\n     * @return {Logger}\n     */\n    infoFail(message, metadata, metadataStyles) {\n        return this.log(message, metadata, levels.INFO, {\n            metadataStyles,\n            symbol: '✖',\n            styles: ['red', 'bold'],\n        });\n    }\n\n    /**\n     * Log an debug fail message\n     *\n     * @param {string} message\n     * @param {Object} [metadata]\n     * @param {Object} [metadataStyles]\n     * @return {Logger}\n     */\n    debugFail(message, metadata, metadataStyles) {\n        return this.log(message, metadata, levels.DEBUG, {\n            metadataStyles,\n            symbol: '✖',\n            styles: ['red'],\n        });\n    }\n\n    /**\n     * @returns {*} time to pass to timeEnd\n     */\n    time() {\n        return Date.now();\n    }\n\n    /**\n    * Finds difference between when this method\n    * was called and when the respective time method\n    * was called, then logs out the difference\n    * and deletes the original record\n    *\n    * @param {number=} time return of previous call to time()\n    * @param {string} message\n     * @param {Object} [metadata]\n     * @param {Object} [metadataStyles]\n    */\n    timeEnd(time, message, metadata = {}, metadataStyles) {\n        const now = Date.now();\n\n        const diffTime = now - time;\n        const seconds = diffTime > 1000 && Math.floor(diffTime / 1000);\n        const ms = diffTime - seconds * 1000;\n\n        metadata.readableTime = `${seconds ? `${seconds}s and ` : ''}${ms}ms`;\n        metadata.timeMs = diffTime;\n        this.log(message, metadata, levels.DEBUG, { metadataStyles });\n    }\n\n    /**\n     * Log an enter in a function\n     *\n     * @example\n     * class A {\n     *   method(arg1) {\n     *     logger.enter(method, { arg1 });\n     *     // Do your stuff\n     *   }\n     * }\n     *\n     * @param {Function} fn\n     * @param {Object} [metadata]\n     * @param {Object} [metadataStyles]\n     * @return {Logger}\n     */\n    enter(fn, metadata = {}, metadataStyles) {\n        metadata = {\n            functionName: fn.name,\n            ...metadata,\n        };\n        return this.log('enter', metadata, levels.TRACE, { metadataStyles });\n    }\n\n    /**\n     * Log an exit in a function\n     *\n     * @example\n     * const logger = new ConsoleLogger('myNamespace.A');\n     * class A {\n     *   method(arg1) {\n     *     // Do your stuff\n     *     logger.exit(method, { arg1 });\n     *   }\n     * }\n     *\n     *\n     * @param {Function} fn\n     * @param {Object} [metadata]\n     * @param {Object} [metadataStyles]\n     * @return {Logger}\n     */\n    exit(fn, metadata, metadataStyles) {\n        metadata = {\n            functionName: fn.name,\n            ...metadata,\n        };\n        return this.log('exit', metadata, levels.TRACE, { metadataStyles });\n    }\n\n    /**\n     * Wrap around a function to log enter and exit of a function\n     *\n     * @example\n     * const logger = new ConsoleLogger('myNamespace.A');\n     * class A {\n     *   method() {\n     *     logger.wrap(method, () => {\n     *       // Do your stuff\n     *     });\n     *   }\n     * }\n     *\n     * @param {Function} fn\n     * @param {Object} [metadata]\n     * @param {Object} [metadataStyles]\n     * @param {Function} callback\n     */\n    wrap(fn, metadata, metadataStyles, callback) {\n        if (typeof metadata === 'function') {\n            callback = metadata;\n            metadata = undefined;\n        } else if (typeof metadataStyles === 'function') {\n            callback = metadataStyles;\n            metadataStyles = undefined;\n        }\n\n        this.enter(fn, metadata, metadataStyles);\n        callback();\n        this.exit(fn);\n    }\n}\n"]}