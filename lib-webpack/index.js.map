{"version":3,"sources":["../src/index.js"],"names":["util","levels","global","__NIGHTINGALE_GET_CONFIG_FOR_LOGGER_RECORD","handlers","processors","getConfigForLoggerRecord","key","recordLevel","Logger","displayName","Error","childSuffixKey","childDisplayName","context","logger","setContext","_context","extendedContext","Object","assign","record","getHandlersAndProcessors","level","length","ERROR","console","log","message","forEach","process","some","handler","handle","metadata","INFO","options","undefined","datetime","Date","extra","addRecord","metadataStyles","TRACE","DEBUG","WARN","error","name","ALERT","FATAL","value","inspect","depth","styles","varName","varValue","infoSuccess","symbol","infoFail","now","time","diffTime","readableTime","seconds","Math","floor","ms","timeMs","timeEnd","fn","functionName","callback","enter","exit"],"mappings":"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","file":"index.js","sourcesContent":["import util from 'util';\nimport levels from 'nightingale-levels';\n\nif (!global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER_RECORD) {\n  global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER_RECORD = function () {\n    return { handlers: [], processors: [] };\n  };\n}\n\n/** @private */\nfunction getConfigForLoggerRecord(key, recordLevel) {\n  return global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER_RECORD(key, recordLevel);\n}\n\n/**\n * Interface that allows you to log records.\n * This records are treated by handlers\n */\nexport default class Logger {\n  key: string;\n  displayName: ?string;\n\n  /**\n   * Create a new Logger\n   *\n   * @param {string} key\n   * @param {string} [displayName]\n   */\n  constructor(key: string, displayName: ?string) {\n    this.key = key;\n    this.displayName = displayName;\n  }\n\n  /** @private */\n  getHandlersAndProcessors(recordLevel) {\n    return getConfigForLoggerRecord(this.key, recordLevel);\n  }\n\n  /** @private */\n  getConfig() {\n    throw new Error('use getHandlersAndProcessors instead of getConfig');\n  }\n\n  /**\n   * Create a child logger\n   *\n   * @param {string} childSuffixKey\n   * @param {string} [childDisplayName]\n   * @returns {Logger}\n   */\n  child(childSuffixKey: string, childDisplayName: ?string) {\n    return new Logger(`${this.key}.${childSuffixKey}`, childDisplayName);\n  }\n\n  /**\n   * Create a new Logger with the same key a this attached context\n   *\n   * @example\n   * const loggerMyService = new Logger('app.myService');\n   * function someAction(arg1) {\n     *     const logger = loggerMyService.context({ arg1 });\n     *     logger.info('starting');\n     *     // do stuff\n     *     logger.info('done');\n     * }\n   *\n   * @param {Object} context\n   * @returns {Logger}\n   */\n  context(context: Object) {\n    const logger = new Logger(this.key);\n    logger.setContext(context);\n    return logger;\n  }\n\n  /**\n   * Set the context of this logger\n   *\n   * @param {Object} context\n   */\n  setContext(context: Object) {\n    this._context = context;\n  }\n\n  /**\n   * Extends existing context of this logger\n   *\n   * @param {Object} extendedContext\n   */\n  extendsContext(extendedContext: Object) {\n    Object.assign(this._context, extendedContext);\n  }\n\n  /**\n   * Handle a record\n   *\n   * Use this only if you know what you are doing.\n   *\n   * @param {Object} record\n   */\n  addRecord(record: Object) {\n    let { handlers, processors } = this.getHandlersAndProcessors(record.level);\n\n    if (handlers.length === 0) {\n      if (record.level > levels.ERROR) {\n        // eslint-disable-next-line no-console\n        console.log('[nightingale] no logger for > error level.', {\n          key: record.key,\n          message: record.message,\n        });\n      }\n      return;\n    }\n\n    if (processors) {\n      processors.forEach(process => process(record, record.context));\n    }\n\n    handlers.some(handler => handler.handle(record) === false);\n  }\n\n  /**\n   * Log a message\n   *\n   * @param {string} message\n   * @param {Object} metadata\n   * @param {int} [level]\n   * @param {Object} [options]\n   * @return {Logger}\n   */\n  log(\n    message: string,\n    metadata: ?Object,\n    level: number = levels.INFO,\n    options: ?Object = undefined,\n  ) {\n    let context = metadata && metadata.context;\n    if (metadata) {\n      delete metadata.context;\n    }\n\n    let record = {\n      level: level,\n      key: this.key,\n      displayName: this.displayName,\n      datetime: new Date(),\n      message: message,\n      context: context || this._context,\n      metadata: metadata,\n      extra: {},\n    };\n\n    if (options) {\n      record = Object.assign(options, record);\n    }\n\n    this.addRecord(record);\n    return this;\n  }\n\n\n  /**\n   * Log a trace message\n   *\n   * @param {string} message\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @return {Logger}\n   */\n  trace(message, metadata, metadataStyles) {\n    return this.log(message, metadata, levels.TRACE, { metadataStyles });\n  }\n\n\n  /**\n   * Log a debug message\n   *\n   * @param {string} message\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @return {Logger}\n   */\n  debug(message, metadata, metadataStyles) {\n    return this.log(message, metadata, levels.DEBUG, { metadataStyles });\n  }\n\n  /**\n   * Log an info message\n   *\n   * @param {string} message\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @return {Logger}\n   */\n  info(message, metadata, metadataStyles) {\n    return this.log(message, metadata, levels.INFO, { metadataStyles });\n  }\n\n  /**\n   * Log a warn message\n   *\n   * @param {string} message\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @return {Logger}\n   */\n  warn(message, metadata, metadataStyles) {\n    return this.log(message, metadata, levels.WARN, { metadataStyles });\n  }\n\n  /**\n   * Log an error message\n   *\n   * @param {string|Error} message\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @return {Logger}\n   */\n  error(message, metadata = {}, metadataStyles) {\n    if (message instanceof Error) {\n      metadata.error = message;\n      message = `${metadata.error.name}: ${metadata.error.message}`;\n    }\n    return this.log(message, metadata, levels.ERROR, { metadataStyles });\n  }\n\n  /**\n   * Log an alert message\n   *\n   * @param {string} message\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @return {Logger}\n   */\n  alert(message, metadata, metadataStyles) {\n    return this.log(message, metadata, levels.ALERT, { metadataStyles });\n  }\n\n  /**\n   * Log a fatal message\n   *\n   * @param {string} message\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @return {Logger}\n   */\n  fatal(message, metadata, metadataStyles) {\n    return this.log(message, metadata, levels.FATAL, { metadataStyles });\n  }\n\n  /**\n   * Log an inspected value\n   *\n   * @param {*} value\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @return {Logger}\n   */\n  inspectValue(value, metadata, metadataStyles) {\n    // Note: inspect is a special function for node:\n    // https://github.com/nodejs/node/blob/a1bda1b4deb08dfb3e06cb778f0db40023b18318/lib/util.js#L210\n    value = util.inspect(value, { depth: 6 });\n    return this.log(value, metadata, levels.DEBUG, { metadataStyles, styles: ['gray'] });\n  }\n\n  /**\n   * Log a debugged var\n   *\n   * @param {string} varName\n   * @param {*} varValue\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @return {Logger}\n   */\n  inspectVar(varName, varValue, metadata, metadataStyles) {\n    varValue = util.inspect(varValue, { depth: 6 });\n    return this.log(`${varName} = ${varValue}`, metadata, levels.DEBUG, { metadataStyles, styles: ['cyan'] });\n  }\n\n  /**\n   * Alias for infoSuccess\n   *\n   * @param {string} message\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @return {Logger}\n   */\n  success(message, metadata, metadataStyles) {\n    return this.infoSuccess(message, metadata, metadataStyles);\n  }\n\n  /**\n   * Log an info success message\n   *\n   * @param {string} message\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @return {Logger}\n   */\n  infoSuccess(message, metadata, metadataStyles) {\n    return this.log(message, metadata, levels.INFO, {\n      metadataStyles,\n      symbol: '✔',\n      styles: ['green', 'bold'],\n    });\n  }\n\n  /**\n   * Log an debug success message\n   *\n   * @param {string} message\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @return {Logger}\n   */\n  debugSuccess(message, metadata, metadataStyles) {\n    return this.log(message, metadata, levels.DEBUG, {\n      metadataStyles,\n      symbol: '✔',\n      styles: ['green'],\n    });\n  }\n\n  /**\n   * Alias for infoFail\n   *\n   * @param {string} message\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @return {Logger}\n   */\n  fail(message, metadata, metadataStyles) {\n    return this.infoFail(message, metadata, metadataStyles);\n  }\n\n  /**\n   * Log an info fail message\n   *\n   * @param {string} message\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @return {Logger}\n   */\n  infoFail(message, metadata, metadataStyles) {\n    return this.log(message, metadata, levels.INFO, {\n      metadataStyles,\n      symbol: '✖',\n      styles: ['red', 'bold'],\n    });\n  }\n\n  /**\n   * Log an debug fail message\n   *\n   * @param {string} message\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @return {Logger}\n   */\n  debugFail(message, metadata, metadataStyles) {\n    return this.log(message, metadata, levels.DEBUG, {\n      metadataStyles,\n      symbol: '✖',\n      styles: ['red'],\n    });\n  }\n\n  /**\n   * @param {string} [message]\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @param {number} [level = levels.DEBUG]\n   * @returns {*} time to pass to timeEnd\n   */\n  time(message, metadata, metadataStyles, level = levels.DEBUG) {\n    if (message) {\n      this.log(message, metadata, level, { metadataStyles });\n    }\n\n    return Date.now();\n  }\n\n  infoTime(message: string, metadata: ?Object, metadataStyles: ?Object) {\n    return this.time(message, metadata, metadataStyles, levels.INFO);\n  }\n\n  /**\n   * Finds difference between when this method\n   * was called and when the respective time method\n   * was called, then logs out the difference\n   * and deletes the original record\n   *\n   * @param {number=} time return of previous call to time()\n   * @param {string} message\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @param {number} [level = levels.DEBUG]\n   */\n  timeEnd(time, message, metadata = {}, metadataStyles, level = levels.DEBUG, options) {\n    const now = Date.now();\n\n    const diffTime = now - time;\n\n    if (diffTime < 1000) {\n      metadata.readableTime = `${diffTime}ms`;\n    } else {\n      const seconds = diffTime > 1000 && Math.floor(diffTime / 1000);\n      const ms = diffTime - (seconds * 1000);\n      metadata.readableTime = `${seconds ? `${seconds}s and ` : ''}${ms}ms`;\n    }\n\n    metadata.timeMs = diffTime;\n    this.log(message, metadata, level, { ...options, metadataStyles });\n  }\n\n  /**\n   * Like timeEnd, but with INFO level\n   */\n  infoTimeEnd(time: number, message: string, metadata: ?Object, metadataStyles: ?Object) {\n    return this.timeEnd(time, message, metadata, metadataStyles, levels.INFO);\n  }\n\n  /**\n   * Like timeEnd, but with INFO level\n   */\n  infoSuccessTimeEnd(time: number, message: string, metadata: ?Object, metadataStyles: ?Object) {\n    return this.timeEnd(time, message, metadata, metadataStyles, levels.INFO, {\n      symbol: '✔',\n      styles: ['green', 'bold'],\n    });\n  }\n\n  /**\n   * Log an enter in a function\n   *\n   * @example\n   * class A {\n     *   method(arg1) {\n     *     logger.enter(method, { arg1 });\n     *     // Do your stuff\n     *   }\n     * }\n   *\n   * @param {Function} fn\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @return {Logger}\n   */\n  enter(fn, metadata = {}, metadataStyles) {\n    metadata = {\n      functionName: fn.name,\n      ...metadata,\n    };\n    return this.log('enter', metadata, levels.TRACE, { metadataStyles });\n  }\n\n  /**\n   * Log an exit in a function\n   *\n   * @example\n   * const logger = new ConsoleLogger('myNamespace.A');\n   * class A {\n     *   method(arg1) {\n     *     // Do your stuff\n     *     logger.exit(method, { arg1 });\n     *   }\n     * }\n   *\n   *\n   * @param {Function} fn\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @return {Logger}\n   */\n  exit(fn, metadata, metadataStyles) {\n    metadata = {\n      functionName: fn.name,\n      ...metadata,\n    };\n    return this.log('exit', metadata, levels.TRACE, { metadataStyles });\n  }\n\n  /**\n   * Wrap around a function to log enter and exit of a function\n   *\n   * @example\n   * const logger = new ConsoleLogger('myNamespace.A');\n   * class A {\n     *   method() {\n     *     logger.wrap(method, () => {\n     *       // Do your stuff\n     *     });\n     *   }\n     * }\n   *\n   * @param {Function} fn\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @param {Function} callback\n   */\n  wrap(fn, metadata, metadataStyles, callback) {\n    if (typeof metadata === 'function') {\n      callback = metadata;\n      metadata = undefined;\n    } else if (typeof metadataStyles === 'function') {\n      callback = metadataStyles;\n      metadataStyles = undefined;\n    }\n\n    this.enter(fn, metadata, metadataStyles);\n    callback();\n    this.exit(fn);\n  }\n}\n"]}