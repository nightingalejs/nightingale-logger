{"version":3,"sources":["../src/index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import util from 'util';\nimport levels from 'nightingale-levels';\n\nif (!global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER) {\n    global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER = function () {\n        return { handlers: [], processors: [] };\n    };\n}\n\nfunction getConfigForLogger(key) {\n    return global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER(key);\n}\n\n/**\n * Interface that allows you to log records.\n * This records are treated by handlers\n */\nexport default class Logger {\n    key: string;\n    displayName: ?string;\n\n    /**\n     * Create a new Logger\n     *\n     * @param {string} key\n     * @param {string} [displayName]\n     */\n    constructor(key: string, displayName: ?string) {\n        this.key = key;\n        this.displayName = displayName;\n    }\n\n    getConfig() {\n        return getConfigForLogger(this.key);\n    }\n\n    /**\n     * Create a child logger\n     *\n     * @param {string} childSuffixKey\n     * @param {string} [childDisplayName]\n     * @returns {Logger}\n     */\n    child(childSuffixKey: string, childDisplayName: ?string) {\n        return new Logger(`${this.key}.${childSuffixKey}`, childDisplayName);\n    }\n\n    /**\n     * Create a new Logger with the same key a this attached context\n     *\n     * @example\n     * const loggerMyService = new Logger('app.myService');\n     * function someAction(arg1) {\n     *     const logger = loggerMyService.context({ arg1 });\n     *     logger.info('starting');\n     *     // do stuff\n     *     logger.info('done');\n     * }\n     *\n     * @param {Object} context\n     * @returns {Logger}\n     */\n    context(context: Object) {\n        const logger = new Logger(this.key);\n        logger.setContext(context);\n        return logger;\n    }\n\n    /**\n     * Set the context of this logger\n     *\n     * @param {Object} context\n     */\n    setContext(context: Object) {\n        this._context = context;\n    }\n\n    /**\n     * Handle a record\n     *\n     * Use this only if you know what you are doing.\n     *\n     * @param {Object} record\n     */\n    addRecord(record: Object) {\n        let { handlers, processors } = this.getConfig();\n        handlers = handlers.filter(handler => handler.isHandling(record.level, this.key));\n        if (handlers.length === 0) {\n            if (record.level > levels.ERROR) {\n                // eslint-disable-next-line no-console\n                console.log('[nightingale] no logger for > error level.', {\n                    key: record.key,\n                    message: record.message,\n                });\n            }\n            return;\n        }\n\n        if (processors) {\n            processors.forEach(process => process(record, record.context));\n        }\n\n        handlers.some(handler => handler.handle(record) === false);\n    }\n\n    /**\n     * Log a message\n     *\n     * @param {string} message\n     * @param {Object} metadata\n     * @param {int} [level]\n     * @param {Object} [options]\n     * @return {Logger}\n     */\n    log(message: string, metadata: ?Object, level: number = levels.INFO, options: ?Object = undefined) {\n        let context = metadata && metadata.context;\n        if (metadata) {\n            delete metadata.context;\n        }\n\n        let record = {\n            level: level,\n            key: this.key,\n            displayName: this.displayName,\n            datetime: new Date(),\n            message: message,\n            context: context || this._context,\n            metadata: metadata,\n            extra: {},\n        };\n\n        if (options) {\n            record = Object.assign(options, record);\n        }\n\n        this.addRecord(record);\n        return this;\n    }\n\n\n    /**\n     * Log a trace message\n     *\n     * @param {string} message\n     * @param {Object} [metadata]\n     * @param {Object} [metadataStyles]\n     * @return {Logger}\n     */\n    trace(message, metadata, metadataStyles) {\n        return this.log(message, metadata, levels.TRACE, { metadataStyles });\n    }\n\n\n    /**\n     * Log a debug message\n     *\n     * @param {string} message\n     * @param {Object} [metadata]\n     * @param {Object} [metadataStyles]\n     * @return {Logger}\n     */\n    debug(message, metadata, metadataStyles) {\n        return this.log(message, metadata, levels.DEBUG, { metadataStyles });\n    }\n\n    /**\n     * Log an info message\n     *\n     * @param {string} message\n     * @param {Object} [metadata]\n     * @param {Object} [metadataStyles]\n     * @return {Logger}\n     */\n    info(message, metadata, metadataStyles) {\n        return this.log(message, metadata, levels.INFO, { metadataStyles });\n    }\n\n    /**\n     * Log a warn message\n     *\n     * @param {string} message\n     * @param {Object} [metadata]\n     * @param {Object} [metadataStyles]\n     * @return {Logger}\n     */\n    warn(message, metadata, metadataStyles) {\n        return this.log(message, metadata, levels.WARN, { metadataStyles });\n    }\n\n    /**\n     * Log an error message\n     *\n     * @param {string|Error} message\n     * @param {Object} [metadata]\n     * @param {Object} [metadataStyles]\n     * @return {Logger}\n     */\n    error(message, metadata = {}, metadataStyles) {\n        if (message instanceof Error) {\n            metadata.error = message;\n            message = `${metadata.error.name}: ${metadata.error.message}`;\n        }\n        return this.log(message, metadata, levels.ERROR, { metadataStyles });\n    }\n\n    /**\n     * Log an alert message\n     *\n     * @param {string} message\n     * @param {Object} [metadata]\n     * @param {Object} [metadataStyles]\n     * @return {Logger}\n     */\n    alert(message, metadata, metadataStyles) {\n        return this.log(message, metadata, levels.ALERT, { metadataStyles });\n    }\n\n    /**\n     * Log a fatal message\n     *\n     * @param {string} message\n     * @param {Object} [metadata]\n     * @param {Object} [metadataStyles]\n     * @return {Logger}\n     */\n    fatal(message, metadata, metadataStyles) {\n        return this.log(message, metadata, levels.FATAL, { metadataStyles });\n    }\n\n    /**\n     * Log an inspected value\n     *\n     * @param {*} value\n     * @param {Object} [metadata]\n     * @param {Object} [metadataStyles]\n     * @return {Logger}\n     */\n    inspectValue(value, metadata, metadataStyles) {\n        // Note: inspect is a special function for node:\n        // https://github.com/nodejs/node/blob/a1bda1b4deb08dfb3e06cb778f0db40023b18318/lib/util.js#L210\n        value = util.inspect(value, { depth: 6 });\n        return this.log(value, metadata, levels.DEBUG, { metadataStyles, styles: ['gray'] });\n    }\n\n    /**\n     * Log a debugged var\n     *\n     * @param {string} varName\n     * @param {*} varValue\n     * @param {Object} [metadata]\n     * @param {Object} [metadataStyles]\n     * @return {Logger}\n     */\n    inspectVar(varName, varValue, metadata, metadataStyles) {\n        varValue = util.inspect(varValue, { depth: 6 });\n        return this.log(`${varName} = ${varValue}`, metadata, levels.DEBUG, { metadataStyles, styles: ['cyan'] });\n    }\n\n    /**\n     * Alias for infoSuccess\n     *\n     * @param {string} message\n     * @param {Object} [metadata]\n     * @param {Object} [metadataStyles]\n     * @return {Logger}\n     */\n    success(message, metadata, metadataStyles) {\n        return this.infoSuccess(message, metadata, metadataStyles);\n    }\n\n    /**\n     * Log an info success message\n     *\n     * @param {string} message\n     * @param {Object} [metadata]\n     * @param {Object} [metadataStyles]\n     * @return {Logger}\n     */\n    infoSuccess(message, metadata, metadataStyles) {\n        return this.log(message, metadata, levels.INFO, {\n            metadataStyles,\n            symbol: '✔',\n            styles: ['green', 'bold'],\n        });\n    }\n\n    /**\n     * Log an debug success message\n     *\n     * @param {string} message\n     * @param {Object} [metadata]\n     * @param {Object} [metadataStyles]\n     * @return {Logger}\n     */\n    debugSuccess(message, metadata, metadataStyles) {\n        return this.log(message, metadata, levels.DEBUG, {\n            metadataStyles,\n            symbol: '✔',\n            styles: ['green'],\n        });\n    }\n\n    /**\n     * Alias for infoFail\n     *\n     * @param {string} message\n     * @param {Object} [metadata]\n     * @param {Object} [metadataStyles]\n     * @return {Logger}\n     */\n    fail(message, metadata, metadataStyles) {\n        return this.infoFail(message, metadata, metadataStyles);\n    }\n\n    /**\n     * Log an info fail message\n     *\n     * @param {string} message\n     * @param {Object} [metadata]\n     * @param {Object} [metadataStyles]\n     * @return {Logger}\n     */\n    infoFail(message, metadata, metadataStyles) {\n        return this.log(message, metadata, levels.INFO, {\n            metadataStyles,\n            symbol: '✖',\n            styles: ['red', 'bold'],\n        });\n    }\n\n    /**\n     * Log an debug fail message\n     *\n     * @param {string} message\n     * @param {Object} [metadata]\n     * @param {Object} [metadataStyles]\n     * @return {Logger}\n     */\n    debugFail(message, metadata, metadataStyles) {\n        return this.log(message, metadata, levels.DEBUG, {\n            metadataStyles,\n            symbol: '✖',\n            styles: ['red'],\n        });\n    }\n\n    /**\n     * @param {string} [message]\n     * @param {Object} [metadata]\n     * @param {Object} [metadataStyles]\n     * @param {number} [level = levels.DEBUG]\n     * @returns {*} time to pass to timeEnd\n     */\n    time(message, metadata, metadataStyles, level = levels.DEBUG) {\n        if (message) {\n            this.log(message, metadata, level, { metadataStyles });\n        }\n\n        return Date.now();\n    }\n\n    infoTime(message: string, metadata: ?Object, metadataStyles: ?Object) {\n        return this.time(message, metadata, metadataStyles, levels.INFO);\n    }\n\n    /**\n     * Finds difference between when this method\n     * was called and when the respective time method\n     * was called, then logs out the difference\n     * and deletes the original record\n     *\n     * @param {number=} time return of previous call to time()\n     * @param {string} message\n     * @param {Object} [metadata]\n     * @param {Object} [metadataStyles]\n     * @param {number} [level = levels.DEBUG]\n     */\n    timeEnd(time, message, metadata = {}, metadataStyles, level = levels.DEBUG, options) {\n        const now = Date.now();\n\n        const diffTime = now - time;\n\n        if (diffTime < 1000) {\n            metadata.readableTime = `${diffTime}ms`;\n        } else {\n            const seconds = diffTime > 1000 && Math.floor(diffTime / 1000);\n            const ms = diffTime - (seconds * 1000);\n            metadata.readableTime = `${seconds ? `${seconds}s and ` : ''}${ms}ms`;\n        }\n\n        metadata.timeMs = diffTime;\n        this.log(message, metadata, level, { ...options, metadataStyles });\n    }\n\n    /**\n     * Like timeEnd, but with INFO level\n     */\n    infoTimeEnd(time: number, message: string, metadata: ?Object, metadataStyles: ?Object) {\n        return this.timeEnd(time, message, metadata, metadataStyles, levels.INFO);\n    }\n\n    /**\n     * Like timeEnd, but with INFO level\n     */\n    infoSuccessTimeEnd(time: number, message: string, metadata: ?Object, metadataStyles: ?Object) {\n        return this.timeEnd(time, message, metadata, metadataStyles, levels.INFO, {\n            symbol: '✔',\n            styles: ['green', 'bold'],\n        });\n    }\n\n    /**\n     * Log an enter in a function\n     *\n     * @example\n     * class A {\n     *   method(arg1) {\n     *     logger.enter(method, { arg1 });\n     *     // Do your stuff\n     *   }\n     * }\n     *\n     * @param {Function} fn\n     * @param {Object} [metadata]\n     * @param {Object} [metadataStyles]\n     * @return {Logger}\n     */\n    enter(fn, metadata = {}, metadataStyles) {\n        metadata = {\n            functionName: fn.name,\n            ...metadata,\n        };\n        return this.log('enter', metadata, levels.TRACE, { metadataStyles });\n    }\n\n    /**\n     * Log an exit in a function\n     *\n     * @example\n     * const logger = new ConsoleLogger('myNamespace.A');\n     * class A {\n     *   method(arg1) {\n     *     // Do your stuff\n     *     logger.exit(method, { arg1 });\n     *   }\n     * }\n     *\n     *\n     * @param {Function} fn\n     * @param {Object} [metadata]\n     * @param {Object} [metadataStyles]\n     * @return {Logger}\n     */\n    exit(fn, metadata, metadataStyles) {\n        metadata = {\n            functionName: fn.name,\n            ...metadata,\n        };\n        return this.log('exit', metadata, levels.TRACE, { metadataStyles });\n    }\n\n    /**\n     * Wrap around a function to log enter and exit of a function\n     *\n     * @example\n     * const logger = new ConsoleLogger('myNamespace.A');\n     * class A {\n     *   method() {\n     *     logger.wrap(method, () => {\n     *       // Do your stuff\n     *     });\n     *   }\n     * }\n     *\n     * @param {Function} fn\n     * @param {Object} [metadata]\n     * @param {Object} [metadataStyles]\n     * @param {Function} callback\n     */\n    wrap(fn, metadata, metadataStyles, callback) {\n        if (typeof metadata === 'function') {\n            callback = metadata;\n            metadata = undefined;\n        } else if (typeof metadataStyles === 'function') {\n            callback = metadataStyles;\n            metadataStyles = undefined;\n        }\n\n        this.enter(fn, metadata, metadataStyles);\n        callback();\n        this.exit(fn);\n    }\n}\n"]}