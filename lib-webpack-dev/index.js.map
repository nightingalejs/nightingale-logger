{"version":3,"sources":["../src/index.js"],"names":["levels","RecordType","level","key","displayName","datetime","Date","message","context","metadata","extra","HandlerType","minLevel","isHandling","handle","ProcessorType","ConfigForLoggerType","handlers","processors","global","__NIGHTINGALE_GET_CONFIG_FOR_LOGGER","__NIGHTINGALE_GET_CONFIG_FOR_LOGGER_RECORD","filter","handler","getConfigForLoggerRecord","recordLevel","Logger","includes","warn","replace","childSuffixKey","childDisplayName","logger","setContext","_context","extendedContext","Object","assign","record","getHandlersAndProcessors","length","ERROR","console","log","forEach","process","some","INFO","options","undefined","addRecord","metadataStyles","TRACE","DEBUG","WARN","Error","error","name","ALERT","FATAL","value","varName","varValue","infoSuccess","symbol","styles","infoFail","now","time","startTime","diffTime","readableTime","seconds","Math","floor","timeMs","timeEnd","fn","functionName","callback","enter","exit"],"mappings":"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","file":"index.js","sourcesContent":["import util from 'util';\nimport levels from 'nightingale-levels';\n\ntype RecordType = {\n  level: number,\n  key: string,\n  displayName: ?string,\n  datetime: Date,\n  message: string,\n  context: ?Object,\n  metadata: ?Object,\n  extra: ?Object,\n};\n\ntype HandlerType = {\n  minLevel: number,\n  isHandling: ?() => boolean,\n  handle: ?(record: RecordType) => boolean,\n};\n\ntype ProcessorType = (record: RecordType) => void;\n\ntype ConfigForLoggerType = {\n  handlers: Array<HandlerType>,\n  processors: Array<ProcessorType>,\n};\n\nif (!global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER) {\n  global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER = function (): ConfigForLoggerType {\n    return { handlers: [], processors: [] };\n  };\n}\n\nif (!global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER_RECORD) {\n  global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER_RECORD = (\n    (key: string, level: number): ConfigForLoggerType => {\n      const { handlers, processors } = global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER(key);\n\n      return {\n        handlers: handlers.filter(handler => (\n          level >= handler.minLevel && (!handler.isHandling || handler.isHandling(level, key))\n        )),\n        processors,\n      };\n    }\n  );\n}\n\n\n/** @private */\nfunction getConfigForLoggerRecord(key: string, recordLevel: number): ConfigForLoggerType {\n  return global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER_RECORD(key, recordLevel);\n}\n\n/**\n * Interface that allows you to log records.\n * This records are treated by handlers\n */\nexport default class Logger {\n  key: string;\n  displayName: ?string;\n\n  /**\n   * Create a new Logger\n   *\n   * @param {string} key\n   * @param {string} [displayName]\n   */\n  constructor(key: string, displayName: ?string) {\n    if (key.includes('.')) {\n      this.warn('nightingale: `.` in key is deprecated, replace with `:`', { key, displayName });\n      key = key.replace(/\\./g, ':');\n    }\n    this.key = key;\n    this.displayName = displayName;\n  }\n\n  /** @private */\n  getHandlersAndProcessors(recordLevel: number): ConfigForLoggerType {\n    return getConfigForLoggerRecord(this.key, recordLevel);\n  }\n\n  /** @private */\n  getConfig(): ConfigForLoggerType {\n    return global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER(this.key);\n  }\n\n  /**\n   * Create a child logger\n   */\n  child(childSuffixKey: string, childDisplayName: ?string): Logger {\n    return new Logger(`${this.key}:${childSuffixKey}`, childDisplayName);\n  }\n\n  /**\n   * Create a new Logger with the same key a this attached context\n   *\n   * @example\n   * const loggerMyService = new Logger('app.myService');\n   * function someAction(arg1) {\n     *     const logger = loggerMyService.context({ arg1 });\n     *     logger.info('starting');\n     *     // do stuff\n     *     logger.info('done');\n     * }\n   *\n   */\n  context(context: Object): Logger {\n    const logger = new Logger(this.key);\n    logger.setContext(context);\n    return logger;\n  }\n\n  /**\n   * Set the context of this logger\n   *\n   * @param {Object} context\n   */\n  setContext(context: Object) {\n    this._context = context;\n  }\n\n  /**\n   * Extends existing context of this logger\n   */\n  extendsContext(extendedContext: Object) {\n    Object.assign(this._context, extendedContext);\n  }\n\n  /**\n   * Handle a record\n   *\n   * Use this only if you know what you are doing.\n   */\n  addRecord(record: Object) {\n    let { handlers, processors } = this.getHandlersAndProcessors(record.level);\n\n    if (handlers.length === 0) {\n      if (record.level > levels.ERROR) {\n        // eslint-disable-next-line no-console\n        console.log('[nightingale] no logger for > error level.', {\n          key: record.key,\n          message: record.message,\n        });\n      }\n      return;\n    }\n\n    if (processors) {\n      processors.forEach(process => process(record, record.context));\n    }\n\n    handlers.some(handler => handler.handle(record) === false);\n  }\n\n  /**\n   * Log a message\n   */\n  log(\n    message: string,\n    metadata: ?Object,\n    level: number = levels.INFO,\n    options: ?Object = undefined,\n  ) {\n    let context = metadata && metadata.context;\n    if (metadata) {\n      delete metadata.context;\n    }\n\n    let record = {\n      level: level,\n      key: this.key,\n      displayName: this.displayName,\n      datetime: new Date(),\n      message: message,\n      context: context || this._context,\n      metadata: metadata,\n      extra: {},\n    };\n\n    if (options) {\n      record = Object.assign(options, record);\n    }\n\n    this.addRecord(record);\n  }\n\n\n  /**\n   * Log a trace message\n   */\n  trace(message: string, metadata: Object, metadataStyles: ?Object) {\n    this.log(message, metadata, levels.TRACE, { metadataStyles });\n  }\n\n\n  /**\n   * Log a debug message\n   */\n  debug(message: string, metadata: Object, metadataStyles: ?Object) {\n    this.log(message, metadata, levels.DEBUG, { metadataStyles });\n  }\n\n  /**\n   * Log an info message\n   */\n  info(message: string, metadata: Object, metadataStyles: ?Object) {\n    this.log(message, metadata, levels.INFO, { metadataStyles });\n  }\n\n  /**\n   * Log a warn message\n   */\n  warn(message: string, metadata: Object, metadataStyles: ?Object) {\n    this.log(message, metadata, levels.WARN, { metadataStyles });\n  }\n\n  /**\n   * Log an error message\n   */\n  error(message: string | Error, metadata: Object = {}, metadataStyles: ?Object) {\n    if (message instanceof Error) {\n      metadata.error = message;\n      message = `${metadata.error.name}: ${metadata.error.message}`;\n    }\n    this.log(message, metadata, levels.ERROR, { metadataStyles });\n  }\n\n  /**\n   * Log an alert message\n   */\n  alert(message: string, metadata: Object, metadataStyles: ?Object) {\n    this.log(message, metadata, levels.ALERT, { metadataStyles });\n  }\n\n  /**\n   * Log a fatal message\n   */\n  fatal(message: string, metadata: Object, metadataStyles: ?Object) {\n    this.log(message, metadata, levels.FATAL, { metadataStyles });\n  }\n\n  /**\n   * Log an inspected value\n   */\n  inspectValue(value: any, metadata: ?Object, metadataStyles: ?Object) {\n    if (BROWSER) {\n      throw new Error('Not supported for the browser. Prefer `debugger;`');\n    } else {\n      // Note: inspect is a special function for node:\n      // https://github.com/nodejs/node/blob/a1bda1b4deb08dfb3e06cb778f0db40023b18318/lib/util.js#L210\n      value = util.inspect(value, { depth: 6 });\n      this.log(value, metadata, levels.DEBUG, { metadataStyles, styles: ['gray'] });\n    }\n  }\n\n  /**\n   * Log a debugged var\n   */\n  inspectVar(varName: string, varValue: any, metadata: ?Object, metadataStyles: ?Object) {\n    if (BROWSER) {\n      throw new Error('Not supported for the browser. Prefer `debugger;`');\n    } else {\n      varValue = util.inspect(varValue, { depth: 6 });\n      this.log(\n        `${varName} = ${varValue}`,\n        metadata,\n        levels.DEBUG,\n        { metadataStyles, styles: ['cyan'] },\n      );\n    }\n  }\n\n  /**\n   * Alias for infoSuccess\n   */\n  success(message: string, metadata: Object, metadataStyles: ?Object) {\n    this.infoSuccess(message, metadata, metadataStyles);\n  }\n\n  /**\n   * Log an info success message\n   */\n  infoSuccess(message: string, metadata: Object, metadataStyles: ?Object) {\n    this.log(message, metadata, levels.INFO, {\n      metadataStyles,\n      symbol: '✔',\n      styles: ['green', 'bold'],\n    });\n  }\n\n  /**\n   * Log an debug success message\n   */\n  debugSuccess(message: string, metadata: Object, metadataStyles: ?Object) {\n    this.log(message, metadata, levels.DEBUG, {\n      metadataStyles,\n      symbol: '✔',\n      styles: ['green'],\n    });\n  }\n\n  /**\n   * Alias for infoFail\n   */\n  fail(message: string, metadata: Object, metadataStyles: ?Object) {\n    this.infoFail(message, metadata, metadataStyles);\n  }\n\n  /**\n   * Log an info fail message\n   */\n  infoFail(message: string, metadata: Object, metadataStyles: ?Object) {\n    this.log(message, metadata, levels.INFO, {\n      metadataStyles,\n      symbol: '✖',\n      styles: ['red', 'bold'],\n    });\n  }\n\n  /**\n   * Log an debug fail message\n   */\n  debugFail(message: string, metadata: Object, metadataStyles: ?Object) {\n    this.log(message, metadata, levels.DEBUG, {\n      metadataStyles,\n      symbol: '✖',\n      styles: ['red'],\n    });\n  }\n\n  /**\n   * @returns {number} time to pass to timeEnd\n   */\n  time(\n    message: ?string,\n    metadata: ?Object,\n    metadataStyles: ?Object,\n    level: number = levels.DEBUG,\n  ): number {\n    if (message) {\n      this.log(message, metadata, level, { metadataStyles });\n    }\n\n    return Date.now();\n  }\n\n  infoTime(message: ?string, metadata: ?Object, metadataStyles: ?Object): number {\n    return this.time(message, metadata, metadataStyles, levels.INFO);\n  }\n\n  /**\n   * Finds difference between when this method\n   * was called and when the respective time method\n   * was called, then logs out the difference\n   * and deletes the original record\n   */\n  timeEnd(\n    startTime: number,\n    message: string,\n    metadata: Object = {},\n    metadataStyles: ?Object,\n    level: number = levels.DEBUG,\n    options: ?Object,\n  ) {\n    const now = Date.now();\n\n    const diffTime = now - startTime;\n\n    if (diffTime < 1000) {\n      metadata.readableTime = `${diffTime}ms`;\n    } else {\n      const seconds = diffTime > 1000 && Math.floor(diffTime / 1000);\n      const ms = diffTime - (seconds * 1000);\n      metadata.readableTime = `${seconds ? `${seconds}s and ` : ''}${ms}ms`;\n    }\n\n    metadata.timeMs = diffTime;\n    this.log(message, metadata, level, { ...options, metadataStyles });\n  }\n\n  /**\n   * Like timeEnd, but with INFO level\n   */\n  infoTimeEnd(time: number, message: string, metadata: ?Object, metadataStyles: ?Object) {\n    this.timeEnd(time, message, metadata, metadataStyles, levels.INFO);\n  }\n\n  /**\n   * Like timeEnd, but with INFO level\n   */\n  infoSuccessTimeEnd(time: number, message: string, metadata: ?Object, metadataStyles: ?Object) {\n    this.timeEnd(time, message, metadata, metadataStyles, levels.INFO, {\n      symbol: '✔',\n      styles: ['green', 'bold'],\n    });\n  }\n\n  /**\n   * Log an enter in a function\n   *\n   * @example\n   * class A {\n   *   method(arg1) {\n   *     logger.enter(method, { arg1 });\n   *     // Do your stuff\n   *   }\n   * }\n   *\n   */\n  enter(fn: Function, metadata: ?Object, metadataStyles: ?Object) {\n    metadata = {\n      functionName: fn.name,\n      ...metadata,\n    };\n    this.log('enter', metadata, levels.TRACE, { metadataStyles });\n  }\n\n  /**\n   * Log an exit in a function\n   *\n   * @example\n   * const logger = new ConsoleLogger('myNamespace.A');\n   * class A {\n   *   method(arg1) {\n   *     // Do your stuff\n   *     logger.exit(method, { arg1 });\n   *   }\n   * }\n   */\n  exit(fn: Function, metadata: ?Object, metadataStyles: ?Object) {\n    metadata = {\n      functionName: fn.name,\n      ...metadata,\n    };\n    this.log('exit', metadata, levels.TRACE, { metadataStyles });\n  }\n\n  /**\n   * Wrap around a function to log enter and exit of a function\n   *\n   * @example\n   * const logger = new ConsoleLogger('myNamespace.A');\n   * class A {\n     *   method() {\n     *     logger.wrap(method, () => {\n     *       // Do your stuff\n     *     });\n     *   }\n     * }\n   *\n   * @param {Function} fn\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @param {Function} callback\n   */\n  wrap(\n    fn: Function,\n    metadata: ?Object | Function,\n    metadataStyles: ?Object | Function,\n    callback: Function,\n  ) {\n    if (typeof metadata === 'function') {\n      callback = metadata;\n      metadata = undefined;\n    } else if (typeof metadataStyles === 'function') {\n      callback = metadataStyles;\n      metadataStyles = undefined;\n    }\n\n    this.enter(fn, metadata, metadataStyles);\n    callback();\n    this.exit(fn);\n  }\n}\n"]}