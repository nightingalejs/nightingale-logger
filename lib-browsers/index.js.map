{"version":3,"sources":["../src/index.js"],"names":["global","__NIGHTINGALE_GET_CONFIG_FOR_LOGGER","handlers","processors","__NIGHTINGALE_GET_CONFIG_FOR_LOGGER_RECORD","key","level","filter","handler","minLevel","isHandling","getConfigForLoggerRecord","recordLevel","Logger","displayName","includes","warn","replace","childSuffixKey","childDisplayName","context","logger","setContext","_context","extendedContext","Object","assign","record","getHandlersAndProcessors","length","ERROR","console","log","message","forEach","process","some","handle","metadata","INFO","options","undefined","datetime","Date","extra","addRecord","metadataStyles","TRACE","DEBUG","NOTICE","WARN","Error","error","name","CRITICAL","FATAL","ALERT","infoSuccess","symbol","styles","infoFail","now","time","startTime","diffTime","readableTime","seconds","Math","floor","timeMs","timeEnd","fn","functionName","callback","enter","exit"],"mappings":"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","file":"index.js","sourcesContent":["/* eslint-disable max-lines */\n\nimport util from 'util';\nimport levels from 'nightingale-levels';\n\ntype RecordType = {\n  level: number,\n  key: string,\n  displayName: ?string,\n  datetime: Date,\n  message: string,\n  context: ?Object,\n  metadata: ?Object,\n  extra: ?Object,\n};\n\ntype HandlerType = {\n  minLevel: number,\n  isHandling: ?() => boolean,\n  handle: ?(record: RecordType) => boolean,\n};\n\ntype ProcessorType = (record: RecordType) => void;\n\ntype ConfigForLoggerType = {\n  handlers: Array<HandlerType>,\n  processors: Array<ProcessorType>,\n};\n\nif (!global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER) {\n  global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER = function (): ConfigForLoggerType {\n    return { handlers: [], processors: [] };\n  };\n}\n\nif (!global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER_RECORD) {\n  global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER_RECORD = (\n    (key: string, level: number): ConfigForLoggerType => {\n      const { handlers, processors } = global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER(key);\n\n      return {\n        handlers: handlers.filter(handler => (\n          level >= handler.minLevel && (!handler.isHandling || handler.isHandling(level, key))\n        )),\n        processors: processors,\n      };\n    }\n  );\n}\n\n\n/** @private */\nfunction getConfigForLoggerRecord(key: ?string, recordLevel: number): ConfigForLoggerType {\n  return global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER_RECORD(key, recordLevel);\n}\n\n/**\n * Interface that allows you to log records.\n * This records are treated by handlers\n */\nexport default class Logger {\n  key: string;\n  displayName: ?string;\n\n  /**\n   * Create a new Logger\n   *\n   * @param {string} key\n   * @param {string} [displayName]\n   */\n  constructor(key: string, displayName: ?string) {\n    this.key = key;\n    this.displayName = displayName;\n\n    if (key.includes('.')) {\n      this.warn('nightingale: `.` in key is deprecated, replace with `:`', { key, displayName });\n      this.key = key.replace(/\\./g, ':');\n    }\n  }\n\n  /** @private */\n  getHandlersAndProcessors(recordLevel: number): ConfigForLoggerType {\n    return getConfigForLoggerRecord(this.key, recordLevel);\n  }\n\n  /** @private */\n  getConfig(): ConfigForLoggerType {\n    return global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER(this.key);\n  }\n\n  /**\n   * Create a child logger\n   */\n  child(childSuffixKey: string, childDisplayName: ?string): Logger {\n    return new Logger(`${this.key}:${childSuffixKey}`, childDisplayName);\n  }\n\n  /**\n   * Create a new Logger with the same key a this attached context\n   *\n   * @example\n   * const loggerMyService = new Logger('app.myService');\n   * function someAction(arg1) {\n   *     const logger = loggerMyService.context({ arg1 });\n   *     logger.info('starting');\n   *     // do stuff\n   *     logger.info('done');\n   * }\n   *\n   */\n  context(context: Object): Logger {\n    const logger = new Logger(this.key);\n    logger.setContext(context);\n    return logger;\n  }\n\n  /**\n   * Set the context of this logger\n   *\n   * @param {Object} context\n   */\n  setContext(context: Object) {\n    this._context = context;\n  }\n\n  /**\n   * Extends existing context of this logger\n   */\n  extendsContext(extendedContext: Object) {\n    Object.assign(this._context, extendedContext);\n  }\n\n  /**\n   * Handle a record\n   *\n   * Use this only if you know what you are doing.\n   */\n  addRecord(record: Object) {\n    let { handlers, processors } = this.getHandlersAndProcessors(record.level);\n\n    if (handlers.length === 0) {\n      if (record.level > levels.ERROR) {\n        // eslint-disable-next-line no-console\n        console.log('[nightingale] no logger for > error level.', {\n          key: record.key,\n          message: record.message,\n        });\n      }\n      return;\n    }\n\n    if (processors) {\n      processors.forEach(process => process(record, record.context));\n    }\n\n    handlers.some(handler => handler.handle(record) === false);\n  }\n\n  /**\n   * Log a message\n   */\n  log(\n    message: string,\n    metadata: ?Object,\n    level: number = levels.INFO,\n    options: ?Object = undefined,\n  ) {\n    let context = metadata && metadata.context;\n    if (metadata) {\n      delete metadata.context;\n    }\n\n    let record = {\n      level: level,\n      key: this.key,\n      displayName: this.displayName,\n      datetime: new Date(),\n      message: message,\n      context: context || this._context,\n      metadata: metadata,\n      extra: {},\n    };\n\n    if (options) {\n      record = Object.assign(options, record);\n    }\n\n    this.addRecord(record);\n  }\n\n\n  /**\n   * Log a trace message\n   */\n  trace(message: string, metadata: ?Object, metadataStyles: ?Object) {\n    this.log(message, metadata, levels.TRACE, { metadataStyles });\n  }\n\n\n  /**\n   * Log a debug message\n   */\n  debug(message: string, metadata: ?Object, metadataStyles: ?Object) {\n    this.log(message, metadata, levels.DEBUG, { metadataStyles });\n  }\n\n  /**\n   * Notice an info message\n   */\n  notice(message: string, metadata: ?Object, metadataStyles: ?Object) {\n    this.log(message, metadata, levels.NOTICE, { metadataStyles });\n  }\n\n  /**\n   * Log an info message\n   */\n  info(message: string, metadata: ?Object, metadataStyles: ?Object) {\n    this.log(message, metadata, levels.INFO, { metadataStyles });\n  }\n\n  /**\n   * Log a warn message\n   */\n  warn(message: string, metadata: ?Object, metadataStyles: ?Object) {\n    this.log(message, metadata, levels.WARN, { metadataStyles });\n  }\n\n  /**\n   * Log an error message\n   */\n  error(message: string | Error, metadata: Object = {}, metadataStyles: ?Object) {\n    if (message instanceof Error) {\n      metadata.error = message;\n      message = `${metadata.error.name}: ${metadata.error.message}`;\n    }\n    this.log(message, metadata, levels.ERROR, { metadataStyles });\n  }\n\n  /**\n   * Log an critical message\n   */\n  critical(message: string, metadata: ?Object, metadataStyles: ?Object) {\n    this.log(message, metadata, levels.CRITICAL, { metadataStyles });\n  }\n\n  /**\n   * Log a fatal message\n   */\n  fatal(message: string, metadata: ?Object, metadataStyles: ?Object) {\n    this.log(message, metadata, levels.FATAL, { metadataStyles });\n  }\n\n  /**\n   * Log an alert message\n   */\n  alert(message: string, metadata: ?Object, metadataStyles: ?Object) {\n    this.log(message, metadata, levels.ALERT, { metadataStyles });\n  }\n\n  /**\n   * Log an inspected value\n   */\n  inspectValue(value: any, metadata: ?Object, metadataStyles: ?Object) {\n    if (BROWSER) {\n      throw new Error('Not supported for the browser. Prefer `debugger;`');\n    } else {\n      // Note: inspect is a special function for node:\n      // https://github.com/nodejs/node/blob/a1bda1b4deb08dfb3e06cb778f0db40023b18318/lib/util.js#L210\n      value = util.inspect(value, { depth: 6 });\n      this.log(value, metadata, levels.DEBUG, { metadataStyles, styles: ['gray'] });\n    }\n  }\n\n  /**\n   * Log a debugged var\n   */\n  inspectVar(varName: string, varValue: any, metadata: ?Object, metadataStyles: ?Object) {\n    if (BROWSER) {\n      throw new Error('Not supported for the browser. Prefer `debugger;`');\n    } else {\n      varValue = util.inspect(varValue, { depth: 6 });\n      this.log(\n        `${varName} = ${varValue}`,\n        metadata,\n        levels.DEBUG,\n        { metadataStyles, styles: ['cyan'] },\n      );\n    }\n  }\n\n  /**\n   * Alias for infoSuccess\n   */\n  success(message: string, metadata: ?Object, metadataStyles: ?Object) {\n    this.infoSuccess(message, metadata, metadataStyles);\n  }\n\n  /**\n   * Log an info success message\n   */\n  infoSuccess(message: string, metadata: ?Object, metadataStyles: ?Object) {\n    this.log(message, metadata, levels.INFO, {\n      metadataStyles,\n      symbol: '✔',\n      styles: ['green', 'bold'],\n    });\n  }\n\n  /**\n   * Log an debug success message\n   */\n  debugSuccess(message: string, metadata: ?Object, metadataStyles: ?Object) {\n    this.log(message, metadata, levels.DEBUG, {\n      metadataStyles,\n      symbol: '✔',\n      styles: ['green'],\n    });\n  }\n\n  /**\n   * Alias for infoFail\n   */\n  fail(message: string, metadata: ?Object, metadataStyles: ?Object) {\n    this.infoFail(message, metadata, metadataStyles);\n  }\n\n  /**\n   * Log an info fail message\n   */\n  infoFail(message: string, metadata: ?Object, metadataStyles: ?Object) {\n    this.log(message, metadata, levels.INFO, {\n      metadataStyles,\n      symbol: '✖',\n      styles: ['red', 'bold'],\n    });\n  }\n\n  /**\n   * Log an debug fail message\n   */\n  debugFail(message: string, metadata: ?Object, metadataStyles: ?Object) {\n    this.log(message, metadata, levels.DEBUG, {\n      metadataStyles,\n      symbol: '✖',\n      styles: ['red'],\n    });\n  }\n\n  /**\n   * @returns {number} time to pass to timeEnd\n   */\n  time(\n    message: ?string,\n    metadata: ?Object,\n    metadataStyles: ?Object,\n    level: number = levels.DEBUG,\n  ): number {\n    if (message) {\n      this.log(message, metadata, level, { metadataStyles });\n    }\n\n    return Date.now();\n  }\n\n  infoTime(message: ?string, metadata: ?Object, metadataStyles: ?Object): number {\n    return this.time(message, metadata, metadataStyles, levels.INFO);\n  }\n\n  /**\n   * Finds difference between when this method\n   * was called and when the respective time method\n   * was called, then logs out the difference\n   * and deletes the original record\n   */\n  timeEnd(\n    startTime: number,\n    message: string,\n    metadata: Object = {},\n    metadataStyles: ?Object,\n    level: number = levels.DEBUG,\n    options: ?Object,\n  ) {\n    const now = Date.now();\n\n    const diffTime = now - startTime;\n\n    if (diffTime < 1000) {\n      metadata.readableTime = `${diffTime}ms`;\n    } else {\n      const seconds = diffTime > 1000 && Math.floor(diffTime / 1000);\n      const ms = diffTime - (seconds * 1000);\n      metadata.readableTime = `${seconds ? `${seconds}s and ` : ''}${ms}ms`;\n    }\n\n    metadata.timeMs = diffTime;\n    this.log(message, metadata, level, { ...options, metadataStyles });\n  }\n\n  /**\n   * Like timeEnd, but with INFO level\n   */\n  infoTimeEnd(time: number, message: string, metadata: ?Object, metadataStyles: ?Object) {\n    this.timeEnd(time, message, metadata, metadataStyles, levels.INFO);\n  }\n\n  /**\n   * Like timeEnd, but with INFO level\n   */\n  infoSuccessTimeEnd(time: number, message: string, metadata: ?Object, metadataStyles: ?Object) {\n    this.timeEnd(time, message, metadata, metadataStyles, levels.INFO, {\n      symbol: '✔',\n      styles: ['green', 'bold'],\n    });\n  }\n\n  /**\n   * Log an enter in a function\n   *\n   * @example\n   * class A {\n   *   method(arg1) {\n   *     logger.enter(method, { arg1 });\n   *     // Do your stuff\n   *   }\n   * }\n   *\n   */\n  enter(fn: Function, metadata: ?Object, metadataStyles: ?Object) {\n    metadata = {\n      functionName: fn.name,\n      ...metadata,\n    };\n    this.log('enter', metadata, levels.TRACE, { metadataStyles });\n  }\n\n  /**\n   * Log an exit in a function\n   *\n   * @example\n   * const logger = new ConsoleLogger('myNamespace.A');\n   * class A {\n   *   method(arg1) {\n   *     // Do your stuff\n   *     logger.exit(method, { arg1 });\n   *   }\n   * }\n   */\n  exit(fn: Function, metadata: ?Object, metadataStyles: ?Object) {\n    metadata = {\n      functionName: fn.name,\n      ...metadata,\n    };\n    this.log('exit', metadata, levels.TRACE, { metadataStyles });\n  }\n\n  /**\n   * Wrap around a function to log enter and exit of a function\n   *\n   * @example\n   * const logger = new ConsoleLogger('myNamespace.A');\n   * class A {\n     *   method() {\n     *     logger.wrap(method, () => {\n     *       // Do your stuff\n     *     });\n     *   }\n     * }\n   *\n   * @param {Function} fn\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @param {Function} callback\n   */\n  wrap(\n    fn: Function,\n    metadata: ?Object | Function,\n    metadataStyles: ?Object | Function,\n    callback: Function,\n  ) {\n    if (typeof metadata === 'function') {\n      callback = metadata;\n      metadata = undefined;\n    } else if (typeof metadataStyles === 'function') {\n      callback = metadataStyles;\n      metadataStyles = undefined;\n    }\n\n    this.enter(fn, metadata, metadataStyles);\n    callback();\n    this.exit(fn);\n  }\n}\n"]}