{"version":3,"sources":["../src/index.js"],"names":["util","levels","global","__NIGHTINGALE_GET_CONFIG_FOR_LOGGER_RECORD","handlers","processors","getConfigForLoggerRecord","key","recordLevel","Logger","constructor","displayName","getHandlersAndProcessors","getConfig","Error","child","childSuffixKey","childDisplayName","context","logger","setContext","_context","extendsContext","extendedContext","Object","assign","addRecord","record","level","length","ERROR","console","log","message","forEach","process","some","handler","handle","metadata","INFO","options","undefined","datetime","Date","extra","trace","metadataStyles","TRACE","debug","DEBUG","info","warn","WARN","error","name","alert","ALERT","fatal","FATAL","inspectValue","value","inspect","depth","styles","inspectVar","varName","varValue","success","infoSuccess","symbol","debugSuccess","fail","infoFail","debugFail","time","now","infoTime","timeEnd","diffTime","readableTime","seconds","Math","floor","ms","timeMs","infoTimeEnd","infoSuccessTimeEnd","enter","fn","functionName","exit","wrap","callback"],"mappings":"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","file":"index.js","sourcesContent":["import util from 'util';\nimport levels from 'nightingale-levels';\n\nif (!global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER_RECORD) {\n  global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER_RECORD = function () {\n    return { handlers: [], processors: [] };\n  };\n}\n\n/** @private */\nfunction getConfigForLoggerRecord(key, recordLevel) {\n  return global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER_RECORD(key, recordLevel);\n}\n\n/**\n * Interface that allows you to log records.\n * This records are treated by handlers\n */\nexport default class Logger {\n  key: string;\n  displayName: ?string;\n\n  /**\n   * Create a new Logger\n   *\n   * @param {string} key\n   * @param {string} [displayName]\n   */\n  constructor(key: string, displayName: ?string) {\n    this.key = key;\n    this.displayName = displayName;\n  }\n\n  /** @private */\n  getHandlersAndProcessors(recordLevel) {\n    return getConfigForLoggerRecord(this.key, recordLevel);\n  }\n\n  /** @private */\n  getConfig() {\n    throw new Error('use getHandlersAndProcessors instead of getConfig');\n  }\n\n  /**\n   * Create a child logger\n   *\n   * @param {string} childSuffixKey\n   * @param {string} [childDisplayName]\n   * @returns {Logger}\n   */\n  child(childSuffixKey: string, childDisplayName: ?string) {\n    return new Logger(`${this.key}.${childSuffixKey}`, childDisplayName);\n  }\n\n  /**\n   * Create a new Logger with the same key a this attached context\n   *\n   * @example\n   * const loggerMyService = new Logger('app.myService');\n   * function someAction(arg1) {\n     *     const logger = loggerMyService.context({ arg1 });\n     *     logger.info('starting');\n     *     // do stuff\n     *     logger.info('done');\n     * }\n   *\n   * @param {Object} context\n   * @returns {Logger}\n   */\n  context(context: Object) {\n    const logger = new Logger(this.key);\n    logger.setContext(context);\n    return logger;\n  }\n\n  /**\n   * Set the context of this logger\n   *\n   * @param {Object} context\n   */\n  setContext(context: Object) {\n    this._context = context;\n  }\n\n  /**\n   * Extends existing context of this logger\n   *\n   * @param {Object} extendedContext\n   */\n  extendsContext(extendedContext: Object) {\n    Object.assign(this._context, extendedContext);\n  }\n\n  /**\n   * Handle a record\n   *\n   * Use this only if you know what you are doing.\n   *\n   * @param {Object} record\n   */\n  addRecord(record: Object) {\n    let { handlers, processors } = this.getHandlersAndProcessors(record.level);\n\n    if (handlers.length === 0) {\n      if (record.level > levels.ERROR) {\n        // eslint-disable-next-line no-console\n        console.log('[nightingale] no logger for > error level.', {\n          key: record.key,\n          message: record.message,\n        });\n      }\n      return;\n    }\n\n    if (processors) {\n      processors.forEach(process => process(record, record.context));\n    }\n\n    handlers.some(handler => handler.handle(record) === false);\n  }\n\n  /**\n   * Log a message\n   *\n   * @param {string} message\n   * @param {Object} metadata\n   * @param {int} [level]\n   * @param {Object} [options]\n   * @return {Logger}\n   */\n  log(\n    message: string,\n    metadata: ?Object,\n    level: number = levels.INFO,\n    options: ?Object = undefined,\n  ) {\n    let context = metadata && metadata.context;\n    if (metadata) {\n      delete metadata.context;\n    }\n\n    let record = {\n      level: level,\n      key: this.key,\n      displayName: this.displayName,\n      datetime: new Date(),\n      message: message,\n      context: context || this._context,\n      metadata: metadata,\n      extra: {},\n    };\n\n    if (options) {\n      record = Object.assign(options, record);\n    }\n\n    this.addRecord(record);\n    return this;\n  }\n\n\n  /**\n   * Log a trace message\n   *\n   * @param {string} message\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @return {Logger}\n   */\n  trace(message, metadata, metadataStyles) {\n    return this.log(message, metadata, levels.TRACE, { metadataStyles });\n  }\n\n\n  /**\n   * Log a debug message\n   *\n   * @param {string} message\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @return {Logger}\n   */\n  debug(message, metadata, metadataStyles) {\n    return this.log(message, metadata, levels.DEBUG, { metadataStyles });\n  }\n\n  /**\n   * Log an info message\n   *\n   * @param {string} message\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @return {Logger}\n   */\n  info(message, metadata, metadataStyles) {\n    return this.log(message, metadata, levels.INFO, { metadataStyles });\n  }\n\n  /**\n   * Log a warn message\n   *\n   * @param {string} message\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @return {Logger}\n   */\n  warn(message, metadata, metadataStyles) {\n    return this.log(message, metadata, levels.WARN, { metadataStyles });\n  }\n\n  /**\n   * Log an error message\n   *\n   * @param {string|Error} message\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @return {Logger}\n   */\n  error(message, metadata = {}, metadataStyles) {\n    if (message instanceof Error) {\n      metadata.error = message;\n      message = `${metadata.error.name}: ${metadata.error.message}`;\n    }\n    return this.log(message, metadata, levels.ERROR, { metadataStyles });\n  }\n\n  /**\n   * Log an alert message\n   *\n   * @param {string} message\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @return {Logger}\n   */\n  alert(message, metadata, metadataStyles) {\n    return this.log(message, metadata, levels.ALERT, { metadataStyles });\n  }\n\n  /**\n   * Log a fatal message\n   *\n   * @param {string} message\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @return {Logger}\n   */\n  fatal(message, metadata, metadataStyles) {\n    return this.log(message, metadata, levels.FATAL, { metadataStyles });\n  }\n\n  /**\n   * Log an inspected value\n   *\n   * @param {*} value\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @return {Logger}\n   */\n  inspectValue(value, metadata, metadataStyles) {\n    // Note: inspect is a special function for node:\n    // https://github.com/nodejs/node/blob/a1bda1b4deb08dfb3e06cb778f0db40023b18318/lib/util.js#L210\n    value = util.inspect(value, { depth: 6 });\n    return this.log(value, metadata, levels.DEBUG, { metadataStyles, styles: ['gray'] });\n  }\n\n  /**\n   * Log a debugged var\n   *\n   * @param {string} varName\n   * @param {*} varValue\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @return {Logger}\n   */\n  inspectVar(varName, varValue, metadata, metadataStyles) {\n    varValue = util.inspect(varValue, { depth: 6 });\n    return this.log(`${varName} = ${varValue}`, metadata, levels.DEBUG, { metadataStyles, styles: ['cyan'] });\n  }\n\n  /**\n   * Alias for infoSuccess\n   *\n   * @param {string} message\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @return {Logger}\n   */\n  success(message, metadata, metadataStyles) {\n    return this.infoSuccess(message, metadata, metadataStyles);\n  }\n\n  /**\n   * Log an info success message\n   *\n   * @param {string} message\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @return {Logger}\n   */\n  infoSuccess(message, metadata, metadataStyles) {\n    return this.log(message, metadata, levels.INFO, {\n      metadataStyles,\n      symbol: '✔',\n      styles: ['green', 'bold'],\n    });\n  }\n\n  /**\n   * Log an debug success message\n   *\n   * @param {string} message\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @return {Logger}\n   */\n  debugSuccess(message, metadata, metadataStyles) {\n    return this.log(message, metadata, levels.DEBUG, {\n      metadataStyles,\n      symbol: '✔',\n      styles: ['green'],\n    });\n  }\n\n  /**\n   * Alias for infoFail\n   *\n   * @param {string} message\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @return {Logger}\n   */\n  fail(message, metadata, metadataStyles) {\n    return this.infoFail(message, metadata, metadataStyles);\n  }\n\n  /**\n   * Log an info fail message\n   *\n   * @param {string} message\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @return {Logger}\n   */\n  infoFail(message, metadata, metadataStyles) {\n    return this.log(message, metadata, levels.INFO, {\n      metadataStyles,\n      symbol: '✖',\n      styles: ['red', 'bold'],\n    });\n  }\n\n  /**\n   * Log an debug fail message\n   *\n   * @param {string} message\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @return {Logger}\n   */\n  debugFail(message, metadata, metadataStyles) {\n    return this.log(message, metadata, levels.DEBUG, {\n      metadataStyles,\n      symbol: '✖',\n      styles: ['red'],\n    });\n  }\n\n  /**\n   * @param {string} [message]\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @param {number} [level = levels.DEBUG]\n   * @returns {*} time to pass to timeEnd\n   */\n  time(message, metadata, metadataStyles, level = levels.DEBUG) {\n    if (message) {\n      this.log(message, metadata, level, { metadataStyles });\n    }\n\n    return Date.now();\n  }\n\n  infoTime(message: string, metadata: ?Object, metadataStyles: ?Object) {\n    return this.time(message, metadata, metadataStyles, levels.INFO);\n  }\n\n  /**\n   * Finds difference between when this method\n   * was called and when the respective time method\n   * was called, then logs out the difference\n   * and deletes the original record\n   *\n   * @param {number=} time return of previous call to time()\n   * @param {string} message\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @param {number} [level = levels.DEBUG]\n   */\n  timeEnd(time, message, metadata = {}, metadataStyles, level = levels.DEBUG, options) {\n    const now = Date.now();\n\n    const diffTime = now - time;\n\n    if (diffTime < 1000) {\n      metadata.readableTime = `${diffTime}ms`;\n    } else {\n      const seconds = diffTime > 1000 && Math.floor(diffTime / 1000);\n      const ms = diffTime - (seconds * 1000);\n      metadata.readableTime = `${seconds ? `${seconds}s and ` : ''}${ms}ms`;\n    }\n\n    metadata.timeMs = diffTime;\n    this.log(message, metadata, level, { ...options, metadataStyles });\n  }\n\n  /**\n   * Like timeEnd, but with INFO level\n   */\n  infoTimeEnd(time: number, message: string, metadata: ?Object, metadataStyles: ?Object) {\n    return this.timeEnd(time, message, metadata, metadataStyles, levels.INFO);\n  }\n\n  /**\n   * Like timeEnd, but with INFO level\n   */\n  infoSuccessTimeEnd(time: number, message: string, metadata: ?Object, metadataStyles: ?Object) {\n    return this.timeEnd(time, message, metadata, metadataStyles, levels.INFO, {\n      symbol: '✔',\n      styles: ['green', 'bold'],\n    });\n  }\n\n  /**\n   * Log an enter in a function\n   *\n   * @example\n   * class A {\n     *   method(arg1) {\n     *     logger.enter(method, { arg1 });\n     *     // Do your stuff\n     *   }\n     * }\n   *\n   * @param {Function} fn\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @return {Logger}\n   */\n  enter(fn, metadata = {}, metadataStyles) {\n    metadata = {\n      functionName: fn.name,\n      ...metadata,\n    };\n    return this.log('enter', metadata, levels.TRACE, { metadataStyles });\n  }\n\n  /**\n   * Log an exit in a function\n   *\n   * @example\n   * const logger = new ConsoleLogger('myNamespace.A');\n   * class A {\n     *   method(arg1) {\n     *     // Do your stuff\n     *     logger.exit(method, { arg1 });\n     *   }\n     * }\n   *\n   *\n   * @param {Function} fn\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @return {Logger}\n   */\n  exit(fn, metadata, metadataStyles) {\n    metadata = {\n      functionName: fn.name,\n      ...metadata,\n    };\n    return this.log('exit', metadata, levels.TRACE, { metadataStyles });\n  }\n\n  /**\n   * Wrap around a function to log enter and exit of a function\n   *\n   * @example\n   * const logger = new ConsoleLogger('myNamespace.A');\n   * class A {\n     *   method() {\n     *     logger.wrap(method, () => {\n     *       // Do your stuff\n     *     });\n     *   }\n     * }\n   *\n   * @param {Function} fn\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @param {Function} callback\n   */\n  wrap(fn, metadata, metadataStyles, callback) {\n    if (typeof metadata === 'function') {\n      callback = metadata;\n      metadata = undefined;\n    } else if (typeof metadataStyles === 'function') {\n      callback = metadataStyles;\n      metadataStyles = undefined;\n    }\n\n    this.enter(fn, metadata, metadataStyles);\n    callback();\n    this.exit(fn);\n  }\n}\n"]}