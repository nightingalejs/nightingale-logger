{"version":3,"sources":["../src/index.js"],"names":["util","levels","global","__NIGHTINGALE_GET_CONFIG_FOR_LOGGER","handlers","processors","__NIGHTINGALE_GET_CONFIG_FOR_LOGGER_RECORD","key","level","filter","handler","minLevel","isHandling","getConfigForLoggerRecord","recordLevel","Logger","constructor","displayName","replace","includes","warn","getHandlersAndProcessors","getConfig","child","childSuffixKey","childDisplayName","context","logger","setContext","_context","extendsContext","extendedContext","Object","assign","addRecord","record","length","ERROR","console","log","message","forEach","process","some","handle","metadata","INFO","options","undefined","datetime","Date","extra","trace","metadataStyles","TRACE","debug","DEBUG","info","WARN","error","Error","name","alert","ALERT","fatal","FATAL","inspectValue","value","inspect","depth","styles","inspectVar","varName","varValue","success","infoSuccess","symbol","debugSuccess","fail","infoFail","debugFail","time","now","infoTime","timeEnd","diffTime","readableTime","seconds","Math","floor","timeMs","infoTimeEnd","infoSuccessTimeEnd","enter","fn","functionName","exit","wrap","callback"],"mappings":"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","file":"index.js","sourcesContent":["import util from 'util';\nimport levels from 'nightingale-levels';\n\nif (!global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER) {\n  global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER = function () {\n    return { handlers: [], processors: [] };\n  };\n}\n\nif (!global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER_RECORD) {\n  global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER_RECORD = function (key, level) {\n    const { handlers, processors } = global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER(key);\n\n    return {\n      handlers: handlers.filter(handler => (\n        level >= handler.minLevel && (!handler.isHandling || handler.isHandling(level, key))\n      )),\n      processors,\n    };\n  };\n}\n\n\n/** @private */\nfunction getConfigForLoggerRecord(key, recordLevel) {\n  return global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER_RECORD(key, recordLevel);\n}\n\n/**\n * Interface that allows you to log records.\n * This records are treated by handlers\n */\nexport default class Logger {\n  key: string;\n  displayName: ?string;\n\n  /**\n   * Create a new Logger\n   *\n   * @param {string} key\n   * @param {string} [displayName]\n   */\n  constructor(key: string, displayName: ?string) {\n    this.key = key.replace('.', ':');\n    this.displayName = displayName;\n    if (key.includes('.')) {\n      this.warn('nightingale: `.` in key is deprecated, replace with `:`', { key, displayName });\n    }\n  }\n\n  /** @private */\n  getHandlersAndProcessors(recordLevel) {\n    return getConfigForLoggerRecord(this.key, recordLevel);\n  }\n\n  /** @private */\n  getConfig() {\n    return global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER(this.key);\n  }\n\n  /**\n   * Create a child logger\n   *\n   * @param {string} childSuffixKey\n   * @param {string} [childDisplayName]\n   * @returns {Logger}\n   */\n  child(childSuffixKey: string, childDisplayName: ?string) {\n    return new Logger(`${this.key}:${childSuffixKey}`, childDisplayName);\n  }\n\n  /**\n   * Create a new Logger with the same key a this attached context\n   *\n   * @example\n   * const loggerMyService = new Logger('app.myService');\n   * function someAction(arg1) {\n     *     const logger = loggerMyService.context({ arg1 });\n     *     logger.info('starting');\n     *     // do stuff\n     *     logger.info('done');\n     * }\n   *\n   * @param {Object} context\n   * @returns {Logger}\n   */\n  context(context: Object) {\n    const logger = new Logger(this.key);\n    logger.setContext(context);\n    return logger;\n  }\n\n  /**\n   * Set the context of this logger\n   *\n   * @param {Object} context\n   */\n  setContext(context: Object) {\n    this._context = context;\n  }\n\n  /**\n   * Extends existing context of this logger\n   *\n   * @param {Object} extendedContext\n   */\n  extendsContext(extendedContext: Object) {\n    Object.assign(this._context, extendedContext);\n  }\n\n  /**\n   * Handle a record\n   *\n   * Use this only if you know what you are doing.\n   *\n   * @param {Object} record\n   */\n  addRecord(record: Object) {\n    let { handlers, processors } = this.getHandlersAndProcessors(record.level);\n\n    if (handlers.length === 0) {\n      if (record.level > levels.ERROR) {\n        // eslint-disable-next-line no-console\n        console.log('[nightingale] no logger for > error level.', {\n          key: record.key,\n          message: record.message,\n        });\n      }\n      return;\n    }\n\n    if (processors) {\n      processors.forEach(process => process(record, record.context));\n    }\n\n    handlers.some(handler => handler.handle(record) === false);\n  }\n\n  /**\n   * Log a message\n   *\n   * @param {string} message\n   * @param {Object} metadata\n   * @param {int} [level]\n   * @param {Object} [options]\n   */\n  log(\n    message: string,\n    metadata: ?Object,\n    level: number = levels.INFO,\n    options: ?Object = undefined,\n  ) {\n    let context = metadata && metadata.context;\n    if (metadata) {\n      delete metadata.context;\n    }\n\n    let record = {\n      level: level,\n      key: this.key,\n      displayName: this.displayName,\n      datetime: new Date(),\n      message: message,\n      context: context || this._context,\n      metadata: metadata,\n      extra: {},\n    };\n\n    if (options) {\n      record = Object.assign(options, record);\n    }\n\n    this.addRecord(record);\n  }\n\n\n  /**\n   * Log a trace message\n   *\n   * @param {string} message\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   */\n  trace(message, metadata, metadataStyles) {\n    return this.log(message, metadata, levels.TRACE, { metadataStyles });\n  }\n\n\n  /**\n   * Log a debug message\n   *\n   * @param {string} message\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   */\n  debug(message, metadata, metadataStyles) {\n    return this.log(message, metadata, levels.DEBUG, { metadataStyles });\n  }\n\n  /**\n   * Log an info message\n   *\n   * @param {string} message\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   */\n  info(message, metadata, metadataStyles) {\n    return this.log(message, metadata, levels.INFO, { metadataStyles });\n  }\n\n  /**\n   * Log a warn message\n   *\n   * @param {string} message\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   */\n  warn(message, metadata, metadataStyles) {\n    return this.log(message, metadata, levels.WARN, { metadataStyles });\n  }\n\n  /**\n   * Log an error message\n   *\n   * @param {string|Error} message\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   */\n  error(message, metadata = {}, metadataStyles) {\n    if (message instanceof Error) {\n      metadata.error = message;\n      message = `${metadata.error.name}: ${metadata.error.message}`;\n    }\n    return this.log(message, metadata, levels.ERROR, { metadataStyles });\n  }\n\n  /**\n   * Log an alert message\n   *\n   * @param {string} message\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   */\n  alert(message, metadata, metadataStyles) {\n    return this.log(message, metadata, levels.ALERT, { metadataStyles });\n  }\n\n  /**\n   * Log a fatal message\n   *\n   * @param {string} message\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   */\n  fatal(message, metadata, metadataStyles) {\n    return this.log(message, metadata, levels.FATAL, { metadataStyles });\n  }\n\n  /**\n   * Log an inspected value\n   *\n   * @param {*} value\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   */\n  inspectValue(value, metadata, metadataStyles) {\n    // Note: inspect is a special function for node:\n    // https://github.com/nodejs/node/blob/a1bda1b4deb08dfb3e06cb778f0db40023b18318/lib/util.js#L210\n    value = util.inspect(value, { depth: 6 });\n    return this.log(value, metadata, levels.DEBUG, { metadataStyles, styles: ['gray'] });\n  }\n\n  /**\n   * Log a debugged var\n   *\n   * @param {string} varName\n   * @param {*} varValue\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   */\n  inspectVar(varName, varValue, metadata, metadataStyles) {\n    varValue = util.inspect(varValue, { depth: 6 });\n    return this.log(`${varName} = ${varValue}`, metadata, levels.DEBUG, { metadataStyles, styles: ['cyan'] });\n  }\n\n  /**\n   * Alias for infoSuccess\n   *\n   * @param {string} message\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   */\n  success(message, metadata, metadataStyles) {\n    return this.infoSuccess(message, metadata, metadataStyles);\n  }\n\n  /**\n   * Log an info success message\n   *\n   * @param {string} message\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   */\n  infoSuccess(message, metadata, metadataStyles) {\n    return this.log(message, metadata, levels.INFO, {\n      metadataStyles,\n      symbol: '✔',\n      styles: ['green', 'bold'],\n    });\n  }\n\n  /**\n   * Log an debug success message\n   *\n   * @param {string} message\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   */\n  debugSuccess(message, metadata, metadataStyles) {\n    return this.log(message, metadata, levels.DEBUG, {\n      metadataStyles,\n      symbol: '✔',\n      styles: ['green'],\n    });\n  }\n\n  /**\n   * Alias for infoFail\n   *\n   * @param {string} message\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   */\n  fail(message, metadata, metadataStyles) {\n    return this.infoFail(message, metadata, metadataStyles);\n  }\n\n  /**\n   * Log an info fail message\n   *\n   * @param {string} message\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   */\n  infoFail(message, metadata, metadataStyles) {\n    return this.log(message, metadata, levels.INFO, {\n      metadataStyles,\n      symbol: '✖',\n      styles: ['red', 'bold'],\n    });\n  }\n\n  /**\n   * Log an debug fail message\n   *\n   * @param {string} message\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   */\n  debugFail(message, metadata, metadataStyles) {\n    return this.log(message, metadata, levels.DEBUG, {\n      metadataStyles,\n      symbol: '✖',\n      styles: ['red'],\n    });\n  }\n\n  /**\n   * @param {string} [message]\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @param {number} [level = levels.DEBUG]\n   * @returns {*} time to pass to timeEnd\n   */\n  time(message, metadata, metadataStyles, level = levels.DEBUG) {\n    if (message) {\n      this.log(message, metadata, level, { metadataStyles });\n    }\n\n    return Date.now();\n  }\n\n  infoTime(message: string, metadata: ?Object, metadataStyles: ?Object) {\n    return this.time(message, metadata, metadataStyles, levels.INFO);\n  }\n\n  /**\n   * Finds difference between when this method\n   * was called and when the respective time method\n   * was called, then logs out the difference\n   * and deletes the original record\n   *\n   * @param {number=} time return of previous call to time()\n   * @param {string} message\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @param {number} [level = levels.DEBUG]\n   */\n  timeEnd(time, message, metadata = {}, metadataStyles, level = levels.DEBUG, options) {\n    const now = Date.now();\n\n    const diffTime = now - time;\n\n    if (diffTime < 1000) {\n      metadata.readableTime = `${diffTime}ms`;\n    } else {\n      const seconds = diffTime > 1000 && Math.floor(diffTime / 1000);\n      const ms = diffTime - (seconds * 1000);\n      metadata.readableTime = `${seconds ? `${seconds}s and ` : ''}${ms}ms`;\n    }\n\n    metadata.timeMs = diffTime;\n    this.log(message, metadata, level, { ...options, metadataStyles });\n  }\n\n  /**\n   * Like timeEnd, but with INFO level\n   */\n  infoTimeEnd(time: number, message: string, metadata: ?Object, metadataStyles: ?Object) {\n    return this.timeEnd(time, message, metadata, metadataStyles, levels.INFO);\n  }\n\n  /**\n   * Like timeEnd, but with INFO level\n   */\n  infoSuccessTimeEnd(time: number, message: string, metadata: ?Object, metadataStyles: ?Object) {\n    return this.timeEnd(time, message, metadata, metadataStyles, levels.INFO, {\n      symbol: '✔',\n      styles: ['green', 'bold'],\n    });\n  }\n\n  /**\n   * Log an enter in a function\n   *\n   * @example\n   * class A {\n     *   method(arg1) {\n     *     logger.enter(method, { arg1 });\n     *     // Do your stuff\n     *   }\n     * }\n   *\n   * @param {Function} fn\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   */\n  enter(fn, metadata = {}, metadataStyles) {\n    metadata = {\n      functionName: fn.name,\n      ...metadata,\n    };\n    return this.log('enter', metadata, levels.TRACE, { metadataStyles });\n  }\n\n  /**\n   * Log an exit in a function\n   *\n   * @example\n   * const logger = new ConsoleLogger('myNamespace.A');\n   * class A {\n     *   method(arg1) {\n     *     // Do your stuff\n     *     logger.exit(method, { arg1 });\n     *   }\n     * }\n   *\n   *\n   * @param {Function} fn\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   */\n  exit(fn, metadata, metadataStyles) {\n    metadata = {\n      functionName: fn.name,\n      ...metadata,\n    };\n    return this.log('exit', metadata, levels.TRACE, { metadataStyles });\n  }\n\n  /**\n   * Wrap around a function to log enter and exit of a function\n   *\n   * @example\n   * const logger = new ConsoleLogger('myNamespace.A');\n   * class A {\n     *   method() {\n     *     logger.wrap(method, () => {\n     *       // Do your stuff\n     *     });\n     *   }\n     * }\n   *\n   * @param {Function} fn\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @param {Function} callback\n   */\n  wrap(fn, metadata, metadataStyles, callback) {\n    if (typeof metadata === 'function') {\n      callback = metadata;\n      metadata = undefined;\n    } else if (typeof metadataStyles === 'function') {\n      callback = metadataStyles;\n      metadataStyles = undefined;\n    }\n\n    this.enter(fn, metadata, metadataStyles);\n    callback();\n    this.exit(fn);\n  }\n}\n"]}