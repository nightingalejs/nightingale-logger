{"version":3,"sources":["../src/index.js"],"names":["RecordType","level","key","displayName","datetime","Date","message","context","metadata","extra","HandlerType","minLevel","isHandling","handle","ProcessorType","ConfigForLoggerType","handlers","processors","global","__NIGHTINGALE_GET_CONFIG_FOR_LOGGER","__NIGHTINGALE_GET_CONFIG_FOR_LOGGER_RECORD","filter","handler","getConfigForLoggerRecord","recordLevel","Logger","constructor","includes","warn","replace","getHandlersAndProcessors","getConfig","child","childSuffixKey","childDisplayName","logger","setContext","_context","extendsContext","extendedContext","Object","assign","addRecord","record","length","ERROR","console","log","forEach","process","some","INFO","options","undefined","trace","metadataStyles","TRACE","debug","DEBUG","info","WARN","error","Error","name","alert","ALERT","fatal","FATAL","inspectValue","value","inspect","depth","styles","inspectVar","varName","varValue","success","infoSuccess","symbol","debugSuccess","fail","infoFail","debugFail","time","now","infoTime","timeEnd","startTime","diffTime","readableTime","seconds","Math","floor","timeMs","infoTimeEnd","infoSuccessTimeEnd","enter","fn","functionName","exit","wrap","callback"],"mappings":"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","file":"index.js","sourcesContent":["import util from 'util';\nimport levels from 'nightingale-levels';\n\ntype RecordType = {\n  level: number,\n  key: string,\n  displayName: ?string,\n  datetime: Date,\n  message: string,\n  context: ?Object,\n  metadata: ?Object,\n  extra: ?Object,\n};\n\ntype HandlerType = {\n  minLevel: number,\n  isHandling: ?() => boolean,\n  handle: ?(record: RecordType) => boolean,\n};\n\ntype ProcessorType = (record: RecordType) => void;\n\ntype ConfigForLoggerType = {\n  handlers: Array<HandlerType>,\n  processors: Array<ProcessorType>,\n};\n\nif (!global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER) {\n  global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER = function (): ConfigForLoggerType {\n    return { handlers: [], processors: [] };\n  };\n}\n\nif (!global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER_RECORD) {\n  global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER_RECORD = (\n    (key: string, level: number): ConfigForLoggerType => {\n      const { handlers, processors } = global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER(key);\n\n      return {\n        handlers: handlers.filter(handler => (\n          level >= handler.minLevel && (!handler.isHandling || handler.isHandling(level, key))\n        )),\n        processors,\n      };\n    }\n  );\n}\n\n\n/** @private */\nfunction getConfigForLoggerRecord(key: string, recordLevel: number): ConfigForLoggerType {\n  return global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER_RECORD(key, recordLevel);\n}\n\n/**\n * Interface that allows you to log records.\n * This records are treated by handlers\n */\nexport default class Logger {\n  key: string;\n  displayName: ?string;\n\n  /**\n   * Create a new Logger\n   *\n   * @param {string} key\n   * @param {string} [displayName]\n   */\n  constructor(key: string, displayName: ?string) {\n    if (key.includes('.')) {\n      this.warn('nightingale: `.` in key is deprecated, replace with `:`', { key, displayName });\n      key = key.replace(/\\./g, ':');\n    }\n    this.key = key;\n    this.displayName = displayName;\n  }\n\n  /** @private */\n  getHandlersAndProcessors(recordLevel: number): ConfigForLoggerType {\n    return getConfigForLoggerRecord(this.key, recordLevel);\n  }\n\n  /** @private */\n  getConfig(): ConfigForLoggerType {\n    return global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER(this.key);\n  }\n\n  /**\n   * Create a child logger\n   */\n  child(childSuffixKey: string, childDisplayName: ?string): Logger {\n    return new Logger(`${this.key}:${childSuffixKey}`, childDisplayName);\n  }\n\n  /**\n   * Create a new Logger with the same key a this attached context\n   *\n   * @example\n   * const loggerMyService = new Logger('app.myService');\n   * function someAction(arg1) {\n     *     const logger = loggerMyService.context({ arg1 });\n     *     logger.info('starting');\n     *     // do stuff\n     *     logger.info('done');\n     * }\n   *\n   */\n  context(context: Object): Logger {\n    const logger = new Logger(this.key);\n    logger.setContext(context);\n    return logger;\n  }\n\n  /**\n   * Set the context of this logger\n   *\n   * @param {Object} context\n   */\n  setContext(context: Object) {\n    this._context = context;\n  }\n\n  /**\n   * Extends existing context of this logger\n   */\n  extendsContext(extendedContext: Object) {\n    Object.assign(this._context, extendedContext);\n  }\n\n  /**\n   * Handle a record\n   *\n   * Use this only if you know what you are doing.\n   */\n  addRecord(record: Object) {\n    let { handlers, processors } = this.getHandlersAndProcessors(record.level);\n\n    if (handlers.length === 0) {\n      if (record.level > levels.ERROR) {\n        // eslint-disable-next-line no-console\n        console.log('[nightingale] no logger for > error level.', {\n          key: record.key,\n          message: record.message,\n        });\n      }\n      return;\n    }\n\n    if (processors) {\n      processors.forEach(process => process(record, record.context));\n    }\n\n    handlers.some(handler => handler.handle(record) === false);\n  }\n\n  /**\n   * Log a message\n   */\n  log(\n    message: string,\n    metadata: ?Object,\n    level: number = levels.INFO,\n    options: ?Object = undefined,\n  ) {\n    let context = metadata && metadata.context;\n    if (metadata) {\n      delete metadata.context;\n    }\n\n    let record = {\n      level: level,\n      key: this.key,\n      displayName: this.displayName,\n      datetime: new Date(),\n      message: message,\n      context: context || this._context,\n      metadata: metadata,\n      extra: {},\n    };\n\n    if (options) {\n      record = Object.assign(options, record);\n    }\n\n    this.addRecord(record);\n  }\n\n\n  /**\n   * Log a trace message\n   */\n  trace(message: string, metadata: ?Object, metadataStyles: ?Object) {\n    this.log(message, metadata, levels.TRACE, { metadataStyles });\n  }\n\n\n  /**\n   * Log a debug message\n   */\n  debug(message: string, metadata: ?Object, metadataStyles: ?Object) {\n    this.log(message, metadata, levels.DEBUG, { metadataStyles });\n  }\n\n  /**\n   * Log an info message\n   */\n  info(message: string, metadata: ?Object, metadataStyles: ?Object) {\n    this.log(message, metadata, levels.INFO, { metadataStyles });\n  }\n\n  /**\n   * Log a warn message\n   */\n  warn(message: string, metadata: ?Object, metadataStyles: ?Object) {\n    this.log(message, metadata, levels.WARN, { metadataStyles });\n  }\n\n  /**\n   * Log an error message\n   */\n  error(message: string | Error, metadata: Object = {}, metadataStyles: ?Object) {\n    if (message instanceof Error) {\n      metadata.error = message;\n      message = `${metadata.error.name}: ${metadata.error.message}`;\n    }\n    this.log(message, metadata, levels.ERROR, { metadataStyles });\n  }\n\n  /**\n   * Log an alert message\n   */\n  alert(message: string, metadata: ?Object, metadataStyles: ?Object) {\n    this.log(message, metadata, levels.ALERT, { metadataStyles });\n  }\n\n  /**\n   * Log a fatal message\n   */\n  fatal(message: string, metadata: ?Object, metadataStyles: ?Object) {\n    this.log(message, metadata, levels.FATAL, { metadataStyles });\n  }\n\n  /**\n   * Log an inspected value\n   */\n  inspectValue(value: any, metadata: ?Object, metadataStyles: ?Object) {\n    if (BROWSER) {\n      throw new Error('Not supported for the browser. Prefer `debugger;`');\n    } else {\n      // Note: inspect is a special function for node:\n      // https://github.com/nodejs/node/blob/a1bda1b4deb08dfb3e06cb778f0db40023b18318/lib/util.js#L210\n      value = util.inspect(value, { depth: 6 });\n      this.log(value, metadata, levels.DEBUG, { metadataStyles, styles: ['gray'] });\n    }\n  }\n\n  /**\n   * Log a debugged var\n   */\n  inspectVar(varName: string, varValue: any, metadata: ?Object, metadataStyles: ?Object) {\n    if (BROWSER) {\n      throw new Error('Not supported for the browser. Prefer `debugger;`');\n    } else {\n      varValue = util.inspect(varValue, { depth: 6 });\n      this.log(\n        `${varName} = ${varValue}`,\n        metadata,\n        levels.DEBUG,\n        { metadataStyles, styles: ['cyan'] },\n      );\n    }\n  }\n\n  /**\n   * Alias for infoSuccess\n   */\n  success(message: string, metadata: ?Object, metadataStyles: ?Object) {\n    this.infoSuccess(message, metadata, metadataStyles);\n  }\n\n  /**\n   * Log an info success message\n   */\n  infoSuccess(message: string, metadata: ?Object, metadataStyles: ?Object) {\n    this.log(message, metadata, levels.INFO, {\n      metadataStyles,\n      symbol: '✔',\n      styles: ['green', 'bold'],\n    });\n  }\n\n  /**\n   * Log an debug success message\n   */\n  debugSuccess(message: string, metadata: ?Object, metadataStyles: ?Object) {\n    this.log(message, metadata, levels.DEBUG, {\n      metadataStyles,\n      symbol: '✔',\n      styles: ['green'],\n    });\n  }\n\n  /**\n   * Alias for infoFail\n   */\n  fail(message: string, metadata: ?Object, metadataStyles: ?Object) {\n    this.infoFail(message, metadata, metadataStyles);\n  }\n\n  /**\n   * Log an info fail message\n   */\n  infoFail(message: string, metadata: ?Object, metadataStyles: ?Object) {\n    this.log(message, metadata, levels.INFO, {\n      metadataStyles,\n      symbol: '✖',\n      styles: ['red', 'bold'],\n    });\n  }\n\n  /**\n   * Log an debug fail message\n   */\n  debugFail(message: string, metadata: ?Object, metadataStyles: ?Object) {\n    this.log(message, metadata, levels.DEBUG, {\n      metadataStyles,\n      symbol: '✖',\n      styles: ['red'],\n    });\n  }\n\n  /**\n   * @returns {number} time to pass to timeEnd\n   */\n  time(\n    message: ?string,\n    metadata: ?Object,\n    metadataStyles: ?Object,\n    level: number = levels.DEBUG,\n  ): number {\n    if (message) {\n      this.log(message, metadata, level, { metadataStyles });\n    }\n\n    return Date.now();\n  }\n\n  infoTime(message: ?string, metadata: ?Object, metadataStyles: ?Object): number {\n    return this.time(message, metadata, metadataStyles, levels.INFO);\n  }\n\n  /**\n   * Finds difference between when this method\n   * was called and when the respective time method\n   * was called, then logs out the difference\n   * and deletes the original record\n   */\n  timeEnd(\n    startTime: number,\n    message: string,\n    metadata: Object = {},\n    metadataStyles: ?Object,\n    level: number = levels.DEBUG,\n    options: ?Object,\n  ) {\n    const now = Date.now();\n\n    const diffTime = now - startTime;\n\n    if (diffTime < 1000) {\n      metadata.readableTime = `${diffTime}ms`;\n    } else {\n      const seconds = diffTime > 1000 && Math.floor(diffTime / 1000);\n      const ms = diffTime - (seconds * 1000);\n      metadata.readableTime = `${seconds ? `${seconds}s and ` : ''}${ms}ms`;\n    }\n\n    metadata.timeMs = diffTime;\n    this.log(message, metadata, level, { ...options, metadataStyles });\n  }\n\n  /**\n   * Like timeEnd, but with INFO level\n   */\n  infoTimeEnd(time: number, message: string, metadata: ?Object, metadataStyles: ?Object) {\n    this.timeEnd(time, message, metadata, metadataStyles, levels.INFO);\n  }\n\n  /**\n   * Like timeEnd, but with INFO level\n   */\n  infoSuccessTimeEnd(time: number, message: string, metadata: ?Object, metadataStyles: ?Object) {\n    this.timeEnd(time, message, metadata, metadataStyles, levels.INFO, {\n      symbol: '✔',\n      styles: ['green', 'bold'],\n    });\n  }\n\n  /**\n   * Log an enter in a function\n   *\n   * @example\n   * class A {\n   *   method(arg1) {\n   *     logger.enter(method, { arg1 });\n   *     // Do your stuff\n   *   }\n   * }\n   *\n   */\n  enter(fn: Function, metadata: ?Object, metadataStyles: ?Object) {\n    metadata = {\n      functionName: fn.name,\n      ...metadata,\n    };\n    this.log('enter', metadata, levels.TRACE, { metadataStyles });\n  }\n\n  /**\n   * Log an exit in a function\n   *\n   * @example\n   * const logger = new ConsoleLogger('myNamespace.A');\n   * class A {\n   *   method(arg1) {\n   *     // Do your stuff\n   *     logger.exit(method, { arg1 });\n   *   }\n   * }\n   */\n  exit(fn: Function, metadata: ?Object, metadataStyles: ?Object) {\n    metadata = {\n      functionName: fn.name,\n      ...metadata,\n    };\n    this.log('exit', metadata, levels.TRACE, { metadataStyles });\n  }\n\n  /**\n   * Wrap around a function to log enter and exit of a function\n   *\n   * @example\n   * const logger = new ConsoleLogger('myNamespace.A');\n   * class A {\n     *   method() {\n     *     logger.wrap(method, () => {\n     *       // Do your stuff\n     *     });\n     *   }\n     * }\n   *\n   * @param {Function} fn\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @param {Function} callback\n   */\n  wrap(\n    fn: Function,\n    metadata: ?Object | Function,\n    metadataStyles: ?Object | Function,\n    callback: Function,\n  ) {\n    if (typeof metadata === 'function') {\n      callback = metadata;\n      metadata = undefined;\n    } else if (typeof metadataStyles === 'function') {\n      callback = metadataStyles;\n      metadataStyles = undefined;\n    }\n\n    this.enter(fn, metadata, metadataStyles);\n    callback();\n    this.exit(fn);\n  }\n}\n"]}