{"version":3,"sources":["../src/index.js"],"names":["util","levels","global","__NIGHTINGALE_GET_CONFIG_FOR_LOGGER","handlers","processors","__NIGHTINGALE_GET_CONFIG_FOR_LOGGER_RECORD","key","level","filter","handler","minLevel","isHandling","getConfigForLoggerRecord","recordLevel","Logger","constructor","displayName","includes","warn","replace","getHandlersAndProcessors","getConfig","child","childSuffixKey","childDisplayName","context","logger","setContext","_context","extendsContext","extendedContext","Object","assign","addRecord","record","length","ERROR","console","log","message","forEach","process","some","handle","metadata","INFO","options","undefined","datetime","Date","extra","trace","metadataStyles","TRACE","debug","DEBUG","notice","NOTICE","info","WARN","error","Error","name","critical","CRITICAL","fatal","FATAL","alert","ALERT","inspectValue","value","inspect","depth","styles","inspectVar","varName","varValue","success","infoSuccess","symbol","debugSuccess","fail","infoFail","debugFail","time","now","infoTime","timeEnd","startTime","diffTime","readableTime","seconds","Math","floor","timeMs","infoTimeEnd","infoSuccessTimeEnd","enter","fn","functionName","exit","wrap","callback"],"mappings":"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","file":"index.js","sourcesContent":["/* eslint-disable max-lines */\n\nimport util from 'util';\nimport levels from 'nightingale-levels';\n\ntype RecordType = {\n  level: number,\n  key: string,\n  displayName: ?string,\n  datetime: Date,\n  message: string,\n  context: ?Object,\n  metadata: ?Object,\n  extra: ?Object,\n};\n\ntype HandlerType = {\n  minLevel: number,\n  isHandling: ?() => boolean,\n  handle: ?(record: RecordType) => boolean,\n};\n\ntype ProcessorType = (record: RecordType) => void;\n\ntype ConfigForLoggerType = {\n  handlers: Array<HandlerType>,\n  processors: Array<ProcessorType>,\n};\n\nif (!global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER) {\n  global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER = function (): ConfigForLoggerType {\n    return { handlers: [], processors: [] };\n  };\n}\n\nif (!global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER_RECORD) {\n  global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER_RECORD = (\n    (key: string, level: number): ConfigForLoggerType => {\n      const { handlers, processors } = global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER(key);\n\n      return {\n        handlers: handlers.filter(handler => (\n          level >= handler.minLevel && (!handler.isHandling || handler.isHandling(level, key))\n        )),\n        processors: processors,\n      };\n    }\n  );\n}\n\n\n/** @private */\nfunction getConfigForLoggerRecord(key: ?string, recordLevel: number): ConfigForLoggerType {\n  return global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER_RECORD(key, recordLevel);\n}\n\n/**\n * Interface that allows you to log records.\n * This records are treated by handlers\n */\nexport default class Logger {\n  key: string;\n  displayName: ?string;\n\n  /**\n   * Create a new Logger\n   *\n   * @param {string} key\n   * @param {string} [displayName]\n   */\n  constructor(key: string, displayName: ?string) {\n    this.key = key;\n    this.displayName = displayName;\n\n    if (key.includes('.')) {\n      this.warn('nightingale: `.` in key is deprecated, replace with `:`', { key, displayName });\n      this.key = key.replace(/\\./g, ':');\n    }\n  }\n\n  /** @private */\n  getHandlersAndProcessors(recordLevel: number): ConfigForLoggerType {\n    return getConfigForLoggerRecord(this.key, recordLevel);\n  }\n\n  /** @private */\n  getConfig(): ConfigForLoggerType {\n    return global.__NIGHTINGALE_GET_CONFIG_FOR_LOGGER(this.key);\n  }\n\n  /**\n   * Create a child logger\n   */\n  child(childSuffixKey: string, childDisplayName: ?string): Logger {\n    return new Logger(`${this.key}:${childSuffixKey}`, childDisplayName);\n  }\n\n  /**\n   * Create a new Logger with the same key a this attached context\n   *\n   * @example\n   * const loggerMyService = new Logger('app.myService');\n   * function someAction(arg1) {\n   *     const logger = loggerMyService.context({ arg1 });\n   *     logger.info('starting');\n   *     // do stuff\n   *     logger.info('done');\n   * }\n   *\n   */\n  context(context: Object): Logger {\n    const logger = new Logger(this.key);\n    logger.setContext(context);\n    return logger;\n  }\n\n  /**\n   * Set the context of this logger\n   *\n   * @param {Object} context\n   */\n  setContext(context: Object) {\n    this._context = context;\n  }\n\n  /**\n   * Extends existing context of this logger\n   */\n  extendsContext(extendedContext: Object) {\n    Object.assign(this._context, extendedContext);\n  }\n\n  /**\n   * Handle a record\n   *\n   * Use this only if you know what you are doing.\n   */\n  addRecord(record: Object) {\n    let { handlers, processors } = this.getHandlersAndProcessors(record.level);\n\n    if (handlers.length === 0) {\n      if (record.level > levels.ERROR) {\n        // eslint-disable-next-line no-console\n        console.log('[nightingale] no logger for > error level.', {\n          key: record.key,\n          message: record.message,\n        });\n      }\n      return;\n    }\n\n    if (processors) {\n      processors.forEach(process => process(record, record.context));\n    }\n\n    handlers.some(handler => handler.handle(record) === false);\n  }\n\n  /**\n   * Log a message\n   */\n  log(\n    message: string,\n    metadata: ?Object,\n    level: number = levels.INFO,\n    options: ?Object = undefined,\n  ) {\n    let context = metadata && metadata.context;\n    if (metadata) {\n      delete metadata.context;\n    }\n\n    let record = {\n      level: level,\n      key: this.key,\n      displayName: this.displayName,\n      datetime: new Date(),\n      message: message,\n      context: context || this._context,\n      metadata: metadata,\n      extra: {},\n    };\n\n    if (options) {\n      record = Object.assign(options, record);\n    }\n\n    this.addRecord(record);\n  }\n\n\n  /**\n   * Log a trace message\n   */\n  trace(message: string, metadata: ?Object, metadataStyles: ?Object) {\n    this.log(message, metadata, levels.TRACE, { metadataStyles });\n  }\n\n\n  /**\n   * Log a debug message\n   */\n  debug(message: string, metadata: ?Object, metadataStyles: ?Object) {\n    this.log(message, metadata, levels.DEBUG, { metadataStyles });\n  }\n\n  /**\n   * Notice an info message\n   */\n  notice(message: string, metadata: ?Object, metadataStyles: ?Object) {\n    this.log(message, metadata, levels.NOTICE, { metadataStyles });\n  }\n\n  /**\n   * Log an info message\n   */\n  info(message: string, metadata: ?Object, metadataStyles: ?Object) {\n    this.log(message, metadata, levels.INFO, { metadataStyles });\n  }\n\n  /**\n   * Log a warn message\n   */\n  warn(message: string, metadata: ?Object, metadataStyles: ?Object) {\n    this.log(message, metadata, levels.WARN, { metadataStyles });\n  }\n\n  /**\n   * Log an error message\n   */\n  error(message: string | Error, metadata: Object = {}, metadataStyles: ?Object) {\n    if (message instanceof Error) {\n      metadata.error = message;\n      message = `${metadata.error.name}: ${metadata.error.message}`;\n    }\n    this.log(message, metadata, levels.ERROR, { metadataStyles });\n  }\n\n  /**\n   * Log an critical message\n   */\n  critical(message: string, metadata: ?Object, metadataStyles: ?Object) {\n    this.log(message, metadata, levels.CRITICAL, { metadataStyles });\n  }\n\n  /**\n   * Log a fatal message\n   */\n  fatal(message: string, metadata: ?Object, metadataStyles: ?Object) {\n    this.log(message, metadata, levels.FATAL, { metadataStyles });\n  }\n\n  /**\n   * Log an alert message\n   */\n  alert(message: string, metadata: ?Object, metadataStyles: ?Object) {\n    this.log(message, metadata, levels.ALERT, { metadataStyles });\n  }\n\n  /**\n   * Log an inspected value\n   */\n  inspectValue(value: any, metadata: ?Object, metadataStyles: ?Object) {\n    if (BROWSER) {\n      throw new Error('Not supported for the browser. Prefer `debugger;`');\n    } else {\n      // Note: inspect is a special function for node:\n      // https://github.com/nodejs/node/blob/a1bda1b4deb08dfb3e06cb778f0db40023b18318/lib/util.js#L210\n      value = util.inspect(value, { depth: 6 });\n      this.log(value, metadata, levels.DEBUG, { metadataStyles, styles: ['gray'] });\n    }\n  }\n\n  /**\n   * Log a debugged var\n   */\n  inspectVar(varName: string, varValue: any, metadata: ?Object, metadataStyles: ?Object) {\n    if (BROWSER) {\n      throw new Error('Not supported for the browser. Prefer `debugger;`');\n    } else {\n      varValue = util.inspect(varValue, { depth: 6 });\n      this.log(\n        `${varName} = ${varValue}`,\n        metadata,\n        levels.DEBUG,\n        { metadataStyles, styles: ['cyan'] },\n      );\n    }\n  }\n\n  /**\n   * Alias for infoSuccess\n   */\n  success(message: string, metadata: ?Object, metadataStyles: ?Object) {\n    this.infoSuccess(message, metadata, metadataStyles);\n  }\n\n  /**\n   * Log an info success message\n   */\n  infoSuccess(message: string, metadata: ?Object, metadataStyles: ?Object) {\n    this.log(message, metadata, levels.INFO, {\n      metadataStyles,\n      symbol: '✔',\n      styles: ['green', 'bold'],\n    });\n  }\n\n  /**\n   * Log an debug success message\n   */\n  debugSuccess(message: string, metadata: ?Object, metadataStyles: ?Object) {\n    this.log(message, metadata, levels.DEBUG, {\n      metadataStyles,\n      symbol: '✔',\n      styles: ['green'],\n    });\n  }\n\n  /**\n   * Alias for infoFail\n   */\n  fail(message: string, metadata: ?Object, metadataStyles: ?Object) {\n    this.infoFail(message, metadata, metadataStyles);\n  }\n\n  /**\n   * Log an info fail message\n   */\n  infoFail(message: string, metadata: ?Object, metadataStyles: ?Object) {\n    this.log(message, metadata, levels.INFO, {\n      metadataStyles,\n      symbol: '✖',\n      styles: ['red', 'bold'],\n    });\n  }\n\n  /**\n   * Log an debug fail message\n   */\n  debugFail(message: string, metadata: ?Object, metadataStyles: ?Object) {\n    this.log(message, metadata, levels.DEBUG, {\n      metadataStyles,\n      symbol: '✖',\n      styles: ['red'],\n    });\n  }\n\n  /**\n   * @returns {number} time to pass to timeEnd\n   */\n  time(\n    message: ?string,\n    metadata: ?Object,\n    metadataStyles: ?Object,\n    level: number = levels.DEBUG,\n  ): number {\n    if (message) {\n      this.log(message, metadata, level, { metadataStyles });\n    }\n\n    return Date.now();\n  }\n\n  infoTime(message: ?string, metadata: ?Object, metadataStyles: ?Object): number {\n    return this.time(message, metadata, metadataStyles, levels.INFO);\n  }\n\n  /**\n   * Finds difference between when this method\n   * was called and when the respective time method\n   * was called, then logs out the difference\n   * and deletes the original record\n   */\n  timeEnd(\n    startTime: number,\n    message: string,\n    metadata: Object = {},\n    metadataStyles: ?Object,\n    level: number = levels.DEBUG,\n    options: ?Object,\n  ) {\n    const now = Date.now();\n\n    const diffTime = now - startTime;\n\n    if (diffTime < 1000) {\n      metadata.readableTime = `${diffTime}ms`;\n    } else {\n      const seconds = diffTime > 1000 && Math.floor(diffTime / 1000);\n      const ms = diffTime - (seconds * 1000);\n      metadata.readableTime = `${seconds ? `${seconds}s and ` : ''}${ms}ms`;\n    }\n\n    metadata.timeMs = diffTime;\n    this.log(message, metadata, level, { ...options, metadataStyles });\n  }\n\n  /**\n   * Like timeEnd, but with INFO level\n   */\n  infoTimeEnd(time: number, message: string, metadata: ?Object, metadataStyles: ?Object) {\n    this.timeEnd(time, message, metadata, metadataStyles, levels.INFO);\n  }\n\n  /**\n   * Like timeEnd, but with INFO level\n   */\n  infoSuccessTimeEnd(time: number, message: string, metadata: ?Object, metadataStyles: ?Object) {\n    this.timeEnd(time, message, metadata, metadataStyles, levels.INFO, {\n      symbol: '✔',\n      styles: ['green', 'bold'],\n    });\n  }\n\n  /**\n   * Log an enter in a function\n   *\n   * @example\n   * class A {\n   *   method(arg1) {\n   *     logger.enter(method, { arg1 });\n   *     // Do your stuff\n   *   }\n   * }\n   *\n   */\n  enter(fn: Function, metadata: ?Object, metadataStyles: ?Object) {\n    metadata = {\n      functionName: fn.name,\n      ...metadata,\n    };\n    this.log('enter', metadata, levels.TRACE, { metadataStyles });\n  }\n\n  /**\n   * Log an exit in a function\n   *\n   * @example\n   * const logger = new ConsoleLogger('myNamespace.A');\n   * class A {\n   *   method(arg1) {\n   *     // Do your stuff\n   *     logger.exit(method, { arg1 });\n   *   }\n   * }\n   */\n  exit(fn: Function, metadata: ?Object, metadataStyles: ?Object) {\n    metadata = {\n      functionName: fn.name,\n      ...metadata,\n    };\n    this.log('exit', metadata, levels.TRACE, { metadataStyles });\n  }\n\n  /**\n   * Wrap around a function to log enter and exit of a function\n   *\n   * @example\n   * const logger = new ConsoleLogger('myNamespace.A');\n   * class A {\n     *   method() {\n     *     logger.wrap(method, () => {\n     *       // Do your stuff\n     *     });\n     *   }\n     * }\n   *\n   * @param {Function} fn\n   * @param {Object} [metadata]\n   * @param {Object} [metadataStyles]\n   * @param {Function} callback\n   */\n  wrap(\n    fn: Function,\n    metadata: ?Object | Function,\n    metadataStyles: ?Object | Function,\n    callback: Function,\n  ) {\n    if (typeof metadata === 'function') {\n      callback = metadata;\n      metadata = undefined;\n    } else if (typeof metadataStyles === 'function') {\n      callback = metadataStyles;\n      metadataStyles = undefined;\n    }\n\n    this.enter(fn, metadata, metadataStyles);\n    callback();\n    this.exit(fn);\n  }\n}\n"]}